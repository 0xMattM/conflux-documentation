"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[7715],{88995:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=t(85893),a=t(11151);const o={title:"GAS \u4f18\u5316",displayed_sidebar:"generalSidebar"},s=void 0,r={id:"general/build/smart-contracts/gas-optimization/gas-optimization",title:"GAS \u4f18\u5316",description:"\u964d\u4f4e gas \u8d39\u7528\u7684\u5c0f\u7a8d\u95e8",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/general/build/smart-contracts/gas-optimization/gas-optimization.md",sourceDirName:"general/build/smart-contracts/gas-optimization",slug:"/general/build/smart-contracts/gas-optimization/",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",frontMatter:{title:"GAS \u4f18\u5316",displayed_sidebar:"generalSidebar"},sidebar:"generalSidebar",previous:{title:"Selector Collision Attack",permalink:"/zh-CN/docs/general/build/smart-contracts/contract-security/selector-collisiion"},next:{title:"Memory vs Calldata",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/memoryAndCalldata"}},l={},c=[{value:"\u964d\u4f4e gas \u8d39\u7528\u7684\u5c0f\u7a8d\u95e8",id:"\u964d\u4f4e-gas-\u8d39\u7528\u7684\u5c0f\u7a8d\u95e8",level:2},{value:"\u4f18\u5316\u6570\u636e\u5b58\u50a8",id:"\u4f18\u5316\u6570\u636e\u5b58\u50a8",level:3},{value:"\u4f18\u5316\u51fd\u6570\u6267\u884c",id:"\u4f18\u5316\u51fd\u6570\u6267\u884c",level:3},{value:"Efficient Loops and Conditions",id:"efficient-loops-and-conditions",level:3},{value:"Use Libraries and Delegate Calls",id:"use-libraries-and-delegate-calls",level:3},{value:"Efficient Event Logging",id:"efficient-event-logging",level:3},{value:"Testing and Optimization Tools",id:"testing-and-optimization-tools",level:3},{value:"Upgradeable Contracts",id:"upgradeable-contracts",level:3},{value:"More Detailed Tutorial of Gas Optimization",id:"more-detailed-tutorial-of-gas-optimization",level:3}];function d(e){const i={a:"a",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h2,{id:"\u964d\u4f4e-gas-\u8d39\u7528\u7684\u5c0f\u7a8d\u95e8",children:"\u964d\u4f4e gas \u8d39\u7528\u7684\u5c0f\u7a8d\u95e8"}),"\n",(0,n.jsx)(i.h3,{id:"\u4f18\u5316\u6570\u636e\u5b58\u50a8",children:"\u4f18\u5316\u6570\u636e\u5b58\u50a8"}),"\n",(0,n.jsx)(i.p,{children:"\u4f7f\u7528\u7d27\u51d1\u7684\u53d8\u91cf\u6253\u5305(Use Tight Variable Packing)\uff1a\u5c06\u8f83\u5c0f\u7684\u6570\u636e\u7c7b\u578b\u7ec4\u5408\u5230\u4e00\u4e2a\u5355\u4e00\u7684\u5b58\u50a8\u69fd\u4e2d\uff0c\u4ee5\u5229\u7528 Solidity \u7684\u5b58\u50a8\u6253\u5305\u7684\u4f18\u52bf\u3002 \u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u5c06 uint8\u3001uint16 \u6216 bool \u578b\u7ec4\u5408\u4f7f\u7528\uff0c\u4f7f\u5b83\u4eec\u9002\u5e94\u5355\u4e2a 32 \u5b57\u8282\u7684\u5b58\u50a8\u69fd\u3002"}),"\n",(0,n.jsx)(i.p,{children:"\u6700\u5c0f\u5316\u72b6\u6001\u53d8\u91cf\uff1a\u4ec5\u5728\u94fe\u4e0a\u5b58\u50a8\u5fc5\u8981\u7684\u6570\u636e\u3002 \u5bf9\u4e8e\u8f83\u5927\u7684\u6570\u636e\uff0c\u8003\u8651\u4f7f\u7528\u94fe\u4e0b\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\uff08\u5982 IPFS\uff09\uff0c\u5e76\u5728\u94fe\u4e0a\u5b58\u50a8\u5176\u54c8\u5e0c\u503c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002"}),"\n",(0,n.jsx)(i.p,{children:"Use bytes32 over string: If possible, use bytes32 for fixed-size strings, as it is more gas-efficient than the dynamically-sized string type."}),"\n",(0,n.jsx)(i.h3,{id:"\u4f18\u5316\u51fd\u6570\u6267\u884c",children:"\u4f18\u5316\u51fd\u6570\u6267\u884c"}),"\n",(0,n.jsx)(i.p,{children:"\u4f7f\u7528 view \u548c pure \u4fee\u9970\u7684\u51fd\u6570\uff1a\u5c06\u4e0d\u4fee\u6539\u72b6\u6001\u7684\u51fd\u6570\u6807\u8bb0\u4e3a view(\u5982\u679c\u53ea\u9700\u8981\u8bfb\u53d6\u72b6\u6001)\u6216 pure(\u5982\u679c\u4e0d\u9700\u8981\u8bfb\u53d6\u72b6\u6001)\uff0c\u8fd9\u6837\u5728\u5916\u90e8\u8c03\u7528\u65f6\u53ef\u4ee5\u51cf\u5c11 gas \u6d88\u8017\u3002"}),"\n",(0,n.jsx)(i.p,{children:"Limit Visibility: Use the most restrictive visibility (private or internal) for functions and variables, as operations are cheaper when they are internal to a contract."}),"\n",(0,n.jsx)(i.p,{children:"Reuse Computed Values: Store computed values in local variables if they are used multiple times within a function to avoid redundant computation costs."}),"\n",(0,n.jsx)(i.h3,{id:"efficient-loops-and-conditions",children:"Efficient Loops and Conditions"}),"\n",(0,n.jsx)(i.p,{children:"Avoid Loops When Possible: Loops can significantly increase gas costs, especially if their iteration count can grow. Consider alternatives like mapping for direct access."}),"\n",(0,n.jsx)(i.p,{children:"Short-Circuit Evaluation: In if statements and logical expressions, order conditions by likelihood or cost. Solidity evaluates conditions from left to right and stops as soon as the result is determined."}),"\n",(0,n.jsx)(i.h3,{id:"use-libraries-and-delegate-calls",children:"Use Libraries and Delegate Calls"}),"\n",(0,n.jsx)(i.p,{children:"Libraries for Reusable Code: Deploy reusable code as libraries. Libraries can be deployed once and then used by many contracts, reducing the deployment and execution gas costs.\nDelegate Calls: Use delegate calls for modular architecture. This can reduce the amount of bytecode in a contract, lowering deployment and execution costs."}),"\n",(0,n.jsx)(i.h3,{id:"efficient-event-logging",children:"Efficient Event Logging"}),"\n",(0,n.jsx)(i.p,{children:"Use Events for Data Not Requiring Immediate Retrieval: Instead of storing information that doesn't need to be immediately retrieved in storage variables, emit events. Logs cost significantly less gas than storage."}),"\n",(0,n.jsx)(i.h3,{id:"testing-and-optimization-tools",children:"Testing and Optimization Tools"}),"\n",(0,n.jsx)(i.p,{children:"Use Gas Reporting Tools: Tools like Hardhat and Truffle can report gas usage for contract functions. Identify high-gas functions for optimization.\nUse Remix IDE: It provides detailed gas consumption for transactions and can help identify expensive operations."}),"\n",(0,n.jsx)(i.h3,{id:"upgradeable-contracts",children:"Upgradeable Contracts"}),"\n",(0,n.jsx)(i.p,{children:"Consider Proxy Patterns: Using proxies allows for the logic contract to be upgraded without redeploying the entire contract, saving gas on deploying large contracts."}),"\n",(0,n.jsx)(i.h3,{id:"more-detailed-tutorial-of-gas-optimization",children:"More Detailed Tutorial of Gas Optimization"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/docs/general/build/smart-contracts/gas-optimization/constant",children:"Constant VS Immutable"})}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>s});var n=t(67294);const a={},o=n.createContext(a);function s(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);