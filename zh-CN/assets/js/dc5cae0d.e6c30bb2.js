"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[2181],{86685:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=a(85893),i=a(11151);const o={displayed_sidebar:"generalSidebar"},r="Local Variables",s={id:"general/build/smart-contracts/gas-optimization/local-variables",title:"Local Variables",description:"In many common DeFi projects, we frequently encounter various complex calculations that inevitably require defining many new local variables and updating existing global variables. It's well-known that modifying storage is significantly more expensive than making changes in memory.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/general/build/smart-contracts/gas-optimization/local-variables.md",sourceDirName:"general/build/smart-contracts/gas-optimization",slug:"/general/build/smart-contracts/gas-optimization/local-variables",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/local-variables",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",frontMatter:{displayed_sidebar:"generalSidebar"},sidebar:"generalSidebar",previous:{title:"\u9519\u8bef",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/error"},next:{title:"MethodId Optimization",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/methodId"}},l={},c=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"local-variables",children:"Local Variables"}),"\n",(0,t.jsx)(n.p,{children:"In many common DeFi projects, we frequently encounter various complex calculations that inevitably require defining many new local variables and updating existing global variables. It's well-known that modifying storage is significantly more expensive than making changes in memory."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u4ee3\u7801\u6f14\u793a"})}),"\n",(0,t.jsx)(n.p,{children:"Below, we present two different methods to modify storage variables and observe the gas difference."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-solidity",children:"contract LocalVariablesExample {\n    uint globalCounter;\n\n    // gas: 4022155\n    function modifyStorageDirectly(uint iterations) external {\n        for (uint i = 0; i < iterations; i++) {\n            globalCounter++;\n        }\n    }\n\n    // gas: 1902339\n    function modifyUsingLocalVariable(uint iterations) external {\n        uint localCounter = 0;\n        for (uint i = 0; i < iterations; i++) {\n            localCounter++;\n        }\n        globalCounter = localCounter;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u5173\u4e8e gas \u4f18\u5316\u7684\u5efa\u8bae\uff1a"}),"\n",(0,t.jsx)(n.p,{children:"\ud83c\udf1f For complex calculations, bypass direct storage variable manipulation to save on high gas costs. Instead, use local variables for interim modifications, then update storage variables in one go. This approach significantly reduces gas usage."})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>r});var t=a(67294);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);