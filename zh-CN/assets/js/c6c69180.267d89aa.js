"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[4711],{3905:(e,n,a)=>{a.d(n,{Zo:()=>i,kt:()=>m});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),p=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},i=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},C=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),d=p(a),C=r,m=d["".concat(l,".").concat(C)]||d[C]||u[C]||c;return a?t.createElement(m,o(o({ref:n},i),{},{components:a})):t.createElement(m,o({ref:n},i))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=a.length,o=new Array(c);o[0]=C;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<c;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}C.displayName="MDXCreateElement"},241:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var t=a(7462),r=(a(7294),a(3905));const c={sidebar_position:6,title:"CrossSpaceCall"},o=void 0,s={unversionedId:"core/learn/core-space-basics/internal-contracts/crossSpaceCall",id:"core/learn/core-space-basics/internal-contracts/crossSpaceCall",title:"CrossSpaceCall",description:"CrossSpaceCall \u63a5\u53e3",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/core/learn/core-space-basics/internal-contracts/crossSpaceCall.md",sourceDirName:"core/learn/core-space-basics/internal-contracts",slug:"/core/learn/core-space-basics/internal-contracts/crossSpaceCall",permalink:"/zh-CN/docs/core/learn/core-space-basics/internal-contracts/crossSpaceCall",draft:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"CrossSpaceCall"},sidebar:"tutorialSidebar",previous:{title:"PoSRegister",permalink:"/zh-CN/docs/core/learn/core-space-basics/internal-contracts/poSRegister"},next:{title:"ParamsControl",permalink:"/zh-CN/docs/core/learn/core-space-basics/internal-contracts/params-control"}},l={},p=[{value:"CrossSpaceCall \u63a5\u53e3",id:"crossspacecall-\u63a5\u53e3",level:2},{value:"\u8de8\u7a7a\u95f4CFX\u8f6c\u79fb",id:"\u8de8\u7a7a\u95f4cfx\u8f6c\u79fb",level:2},{value:"\u4eceCore\u5230eSpace",id:"\u4ececore\u5230espace",level:3},{value:"\u4eceeSpace\u56de\u5230Core",id:"\u4eceespace\u56de\u5230core",level:3},{value:"\u53c2\u8003",id:"\u53c2\u8003",level:2}],i={toc:p},d="wrapper";function u(e){let{components:n,...a}=e;return(0,r.kt)(d,(0,t.Z)({},i,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"crossspacecall-\u63a5\u53e3"},"CrossSpaceCall \u63a5\u53e3"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Conflux-Chain/CIPs/blob/master/CIPs/cip-90.md"},"CIP-90")," \u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5185\u7f6e\u5408\u7ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall"),". \u8fd9\u4e2a\u5408\u7ea6\u4f4d\u4e8eCore Space\u7684\u5730\u5740",(0,r.kt)("inlineCode",{parentName:"p"},"cfx:aaejuaaaaaaaaaaaaaaaaaaaaaaaaaaaa2sn102vjv")," (",(0,r.kt)("inlineCode",{parentName:"p"},"0x0888000000000000000000000000000000000006"),")\u3002 ",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall"),"\u53ef\u4ee5\u5b9e\u73b0",(0,r.kt)("strong",{parentName:"p"},"CFX\u548c\u6570\u636e"),"\u5728\u4e24\u4e2a\u7a7a\u95f4\u4e4b\u95f4\u7684\u8f6c\u79fb\u3002"),(0,r.kt)("p",null,"\u6ce8\u610f\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall"),"\u5408\u7ea6\u90e8\u7f72\u5728Core Space\u3002 \u5b83\u53ea\u80fd\u4eceCore Space\u8c03\u7528\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface CrossSpaceCall {\n    event Call(bytes20 indexed sender, bytes20 indexed receiver, uint256 value, uint256 nonce, bytes data);\n\n    event Create(bytes20 indexed sender, bytes20 indexed contract_address, uint256 value, uint256 nonce, bytes init);\n\n    event Withdraw(bytes20 indexed sender, address indexed receiver, uint256 value, uint256 nonce);\n\n    event Outcome(bool success);\n\n    /**\n     * @dev Deploy a contract in eSpace\n     * @param init bytes -  The contract init bytecode\n     * @return bytes20 - The hex address of the deployed contract\n     */\n    function createEVM(bytes calldata init) external payable returns (bytes20);\n\n    /**\n     * @dev Transfer CFX from Core space to eSpace specify address. Transfer amount is specified by transaction value.\n     * @param to bytes20 - The hex address of the receiver address in eSpace\n     * @return output bytes\n     */\n    function transferEVM(bytes20 to) external payable returns (bytes memory output);\n\n    /**\n     * @dev Call eSpace contract method from Core space\n     * @param to bytes20 - The hex address of the contract in eSpace\n     * @param data bytes - The contract method call data\n     * @return output bytes - Method call result\n     */ \n    function callEVM(bytes20 to, bytes calldata data) external payable returns (bytes memory output);\n\n    /**\n     * @dev Static call eSpace contract method from Core space\n     * @param to bytes20 - The hex address of the contract in eSpace\n     * @param data bytes - The contract method call data\n     * @return output bytes - Method call result\n     */ \n    function staticCallEVM(bytes20 to, bytes calldata data) external view returns (bytes memory output);\n\n    /**\n     * @dev Widthdraw CFX from eSpace mapped account's balance\n     * @param value uint256 - The amount of CFX to be withdrawn\n     */ \n    function withdrawFromMapped(uint256 value) external;\n\n    /**\n     * @dev Query eSpace mapped account's CFX balance\n     * @param addr address - The core address to query\n     * @return uint256 - Balance\n     */\n    function mappedBalance(address addr) external view returns (uint256);\n\n    /**\n     * @dev Query eSpace mapped account's nonce\n     * @param addr address - The core address to query\n     * @return uint256 - Balance\n     * */ \n    function mappedNonce(address addr) external view returns (uint256);\n}\n")),(0,r.kt)("h2",{id:"\u8de8\u7a7a\u95f4cfx\u8f6c\u79fb"},"\u8de8\u7a7a\u95f4CFX\u8f6c\u79fb"),(0,r.kt)("h3",{id:"\u4ececore\u5230espace"},"\u4eceCore\u5230eSpace"),(0,r.kt)("p",null,"\u5c06CFX\u4eceConflux\u6838\u5fc3\u8f6c\u79fb\u5230eSpace\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall.transferEVM(bytes20 to)"),"\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u6307\u5b9a\u76ee\u6807\u5730\u5740\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"to"),"\uff09\u3002 \u901a\u8fc7\u8bbe\u7f6e\u8be5\u4ea4\u6613\u7684 value \u6765\u6307\u5b9a\u8981\u8f6c\u79fb\u7684 CFX \u6570\u91cf\u3002"),(0,r.kt)("p",null,"\u4ee5js-conflux-sdk (v2)\u4e3a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { Conflux, format, Drip, CONST } = require('js-conflux-sdk');\n\n// Init Conflux instance\nconst conflux = new Conflux({\n  url: \"https://test.confluxrpc.com\",\n  networkId: 1\n});\n\n// Add account private key\nconst account = conflux.wallet.addPrivateKey(process.env.PRIVATE_KEY);  // Replace PRIVTE_KEY with your own private key\n\nconst CrossSpaceCall = conflux.InternalContract('CrossSpaceCall');\n\nasync function main() {\n  // The eSpace receiver address\n  const receiverAddress = \"0x02e1A5817ABf2812f04c744927FC91F03099C0f4\";\n\n  const receipt = await CrossSpaceCall\n    .transferEVM(receiverAddress)\n    .sendTransaction({\n      from: account.address,\n      value: Drip.fromCFX(1),\n    })\n    .executed();\n\n  console.log('Cross-space transfer: ', receipt.outcomeStatus === CONST.TX_STATUS.SUCCESS ? 'Success' : 'Fail');\n}\n\nmain().catch(console.log);\n")),(0,r.kt)("p",null,"\u53ea\u8981\u6210\u529f\u8c03\u7528\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall.transferEVM(bytes20 to)"),"\u65b9\u6cd5\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u67e5\u770beSpace\u4e2d\u76ee\u6807\u5730\u5740\u7684\u4f59\u989d\u6765\u770b\u5230\u53d8\u5316\u3002"),(0,r.kt)("h3",{id:"\u4eceespace\u56de\u5230core"},"\u4eceeSpace\u56de\u5230Core"),(0,r.kt)("p",null,"\u5c06CFX\u4eceeSpace\u56de\u5230Conflux Core Space\u9700\u8981\u4e24\u4e2a\u6b65\u9aa4\u3002"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5c06CFX\u8f6c\u79fb\u5230\u63a5\u6536\u8005Core Space\u5730\u5740\u5728eSpace\u4e2d\u7684\u6620\u5c04\u8d26\u6237\u3002"),(0,r.kt)("li",{parentName:"ol"},"\u5728Core Space\u7528\u63a5\u6536\u8005\u5730\u5740\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"li"},"CrossSpaceCall.withdrawFromMapped(amount)"),"\u6765\u63d0\u53d6CFX\u3002")),(0,r.kt)("p",null,"\u4f7f\u7528js-conflux-sdk (v2)\u8de8\u56deCFX\u7684\u793a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Check above init code\nasync function main() {\n  const mappedBalance = await CrossSpaceCall.mappedBalance(account.address);\n  console.log('Mapped account balance: ', Drip.toCFX(`${mappedBalance}`));\n\n  const receipt = await CrossSpaceCall\n    .withdrawFromMapped(Drip.fromCFX(1))\n    .sendTransaction({\n      from: account.address,\n    })\n    .executed();\n\n  console.log('Cross-space transfer: ', receipt.outcomeStatus === CONST.TX_STATUS.SUCCESS ? 'Success' : 'Fail');\n}\n\nmain().catch(console.log);\n")),(0,r.kt)("p",null,"\u4e0a\u9762\u7684\u793a\u4f8b\u662f\u4e3a\u4e86\u6f14\u793a\u5728Conflux Core Space\u548cConflux eSpace\u4e4b\u95f4\u8f6c\u79fbCFX\u7684\u6280\u672f\u7ec6\u8282\u3002 \u7528\u6237\u53ef\u4ee5\u4f7f\u7528",(0,r.kt)("a",{parentName:"p",href:"https://confluxhub.io/espace-bridge/cross-space"},"Space Bridge Dapp")," \u76f4\u63a5\u901a\u8fc7\u4ed6\u4eec\u7684\u94b1\u5305\u8de8CFX\u3002"),(0,r.kt)("h2",{id:"\u53c2\u8003"},"\u53c2\u8003"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://confluxhub.io/espace-bridge/cross-space"},"Mainnet Space Bridge")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://test.confluxhub.io/espace-bridge/cross-space"},"Testnet Space Bridge"))))}u.isMDXComponent=!0}}]);