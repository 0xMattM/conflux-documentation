"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[3023],{7354:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(85893),a=t(11151);const o={displayed_sidebar:"generalSidebar"},i="Low-Cost Reentrancy Guard",c={id:"general/build/smart-contracts/gas-optimization/reentrancy-guard",title:"Low-Cost Reentrancy Guard",description:"Using a modifier for re-entrancy checks in smart contracts boosts security by confirming if the contract is currently executing. Typically, a boolean flag controls access, allowing functions to run only if the contract is not already active.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/general/build/smart-contracts/gas-optimization/reentrancy-guard.md",sourceDirName:"general/build/smart-contracts/gas-optimization",slug:"/general/build/smart-contracts/gas-optimization/reentrancy-guard",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/reentrancy-guard",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",frontMatter:{displayed_sidebar:"generalSidebar"},sidebar:"generalSidebar",previous:{title:"Variable Packing",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/packing"},next:{title:"\u77ed\u8def\u8fd0\u7b97",permalink:"/zh-CN/docs/general/build/smart-contracts/gas-optimization/shortCircuit"}},s={},l=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"low-cost-reentrancy-guard",children:"Low-Cost Reentrancy Guard"}),"\n",(0,r.jsx)(n.p,{children:"Using a modifier for re-entrancy checks in smart contracts boosts security by confirming if the contract is currently executing. Typically, a boolean flag controls access, allowing functions to run only if the contract is not already active."}),"\n",(0,r.jsx)(n.p,{children:"Switching to a uint variable for the lock mechanism can be more gas-efficient. This method leverages different numeric values to indicate the contract's state, providing a flexible way to manage execution flow and potentially reducing gas costs for frequent operations."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u4ee3\u7801\u6f14\u793a"})}),"\n",(0,r.jsx)(n.p,{children:"The demonstration below compares three approaches for re-entrancy protection: using a Boolean flag, utilizing a uint variable toggled between 0 and 1, and employing a uint variable shifted between 1 and 2."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",children:'contract ReentrancyGuardBool {\n    bool private _locked = false;\n    // gas: 27757\n    modifier nonReentrant() {\n        require(!_locked, "REENTRANCY");\n        _locked = true;\n        _;\n        _locked = false;\n    }\n}\n\ncontract ReentrancyGuardUint01 {\n    uint256 private _lockState = 0;\n    // gas: 27604\n    modifier nonReentrant() {\n        require(_lockState == 0, "REENTRANCY");\n        _lockState = 1;\n        _;\n        _lockState = 0;\n    }\n}\n\ncontract ReentrancyGuardUint12 {\n    uint256 private _lockState = 1;\n    // gas: 13908 \n    modifier nonReentrant() {\n        require(_lockState == 1, "REENTRANCY");\n        _lockState = 2;\n        _;\n        _lockState = 1;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5173\u4e8e gas \u4f18\u5316\u7684\u5efa\u8bae\uff1a"}),"\n",(0,r.jsx)(n.p,{children:"\ud83c\udf1f For re-entrancy guard, the efficiency of different methods varies significantly. The Boolean method, which uses two bytes for boolean values, requires more gas due to the EVM's 32-byte word handling. Given that re-entrancy guard modifiers are generally called multiple times, it is recommended to use the Uint 1-2 method for its gas savings."})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var r=t(67294);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);