"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[5711],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},51458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:4,title:"\u4f7f\u7528 ChainIDE \u5f00\u53d1\u667a\u80fd\u5408\u7ea6",description:"\u4f7f\u7528 ChainIDE \u5728 Core \u7a7a\u95f4\u90e8\u7f72\u667a\u80fd\u5408\u7ea6",displayed_sidebar:"coreSidebar"},i=void 0,l={unversionedId:"core/tutorials/chainide",id:"core/tutorials/chainide",title:"\u4f7f\u7528 ChainIDE \u5f00\u53d1\u667a\u80fd\u5408\u7ea6",description:"\u4f7f\u7528 ChainIDE \u5728 Core \u7a7a\u95f4\u90e8\u7f72\u667a\u80fd\u5408\u7ea6",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/core/tutorials/chainide.md",sourceDirName:"core/tutorials",slug:"/core/tutorials/chainide",permalink:"/zh-CN/docs/core/tutorials/chainide",draft:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"\u4f7f\u7528 ChainIDE \u5f00\u53d1\u667a\u80fd\u5408\u7ea6",description:"\u4f7f\u7528 ChainIDE \u5728 Core \u7a7a\u95f4\u90e8\u7f72\u667a\u80fd\u5408\u7ea6",displayed_sidebar:"coreSidebar"},sidebar:"coreSidebar",previous:{title:"Hardhat Conflux \u63d2\u4ef6",permalink:"/zh-CN/docs/core/tutorials/hardhat-conflux-plugin"},next:{title:"\u5982\u4f55\u8d5e\u52a9\u667a\u80fd\u5408\u7ea6",permalink:"/zh-CN/docs/core/tutorials/how-to-sponsor-contract"}},c={},s=[{value:"Creating a Project",id:"creating-a-project",level:2},{value:"Workspace Overview",id:"workspace-overview",level:2},{value:"Compiling the Contract",id:"compiling-the-contract",level:2},{value:"Connecting Fluent Wallet",id:"connecting-fluent-wallet",level:2},{value:"Deploying the Contract",id:"deploying-the-contract",level:2},{value:"Interacting with the Contract",id:"interacting-with-the-contract",level:2},{value:"Additional Tools",id:"additional-tools",level:2},{value:"Summary",id:"summary",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://chainide.com/"},"ChainIDE")," is a web-based IDE tailored for blockchain smart contract development. It offers a comprehensive solution for developing, testing, debugging, and deploying smart contracts. Comparable to Ethereum's Remix, ChainIDE is more versatile, supporting multiple blockchains including Conflux Core Space."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(75742).Z,width:"1365",height:"934"})),(0,o.kt)("p",null,"This tutorial will guide you through using ChainIDE to develop and deploy a smart contract on Core Space."),(0,o.kt)("h2",{id:"creating-a-project"},"Creating a Project"),(0,o.kt)("p",null,"To start, create a project on ChainIDE. Select ",(0,o.kt)("inlineCode",{parentName:"p"},"Conflux")," from the left-hand chain list, then choose a template from the right. For this tutorial, we will use the ",(0,o.kt)("strong",{parentName:"p"},"Storage")," template."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(67578).Z,width:"1263",height:"640"})),(0,o.kt)("h2",{id:"workspace-overview"},"Workspace Overview"),(0,o.kt)("p",null,"Once you create a project, you'll see ChainIDE's workspace, reminiscent of VSCode. It features a file explorer on the left, an editor on the right, and a terminal at the bottom."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(98221).Z,width:"1204",height:"934"})),(0,o.kt)("p",null,"The example Solidity code is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Storage\n * @dev Store & retrieve values in a variable\n */\ncontract Storage {\n\n    uint256 number;\n\n    /**\n     * @dev Store value in variable\n     * @param num value to store\n     */\n    function store(uint256 num) public {\n        number = num;\n    }\n\n    /**\n     * @dev Return value \n     * @return value of 'number'\n     */\n    function retrieve() public view returns (uint256){\n        return number;\n    }\n}\n\n")),(0,o.kt)("h2",{id:"compiling-the-contract"},"Compiling the Contract"),(0,o.kt)("p",null,"In the right-side toolbox, the first option is ",(0,o.kt)("strong",{parentName:"p"},"Solidity Compiler"),". Here, you can select the compiler version and then click the ",(0,o.kt)("strong",{parentName:"p"},"Compile")," button to compile your contract."),(0,o.kt)("p",null,"After compilation, you will get the ",(0,o.kt)("inlineCode",{parentName:"p"},"ABI")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"BYTECODE"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(82094).Z,width:"326",height:"299"})),(0,o.kt)("h2",{id:"connecting-fluent-wallet"},"Connecting Fluent Wallet"),(0,o.kt)("p",null,"Before deploying this contract to the Core Space Testnet, connect your Fluent Wallet. Click the ",(0,o.kt)("strong",{parentName:"p"},"Connect Wallet")," button at the top right of the window."),(0,o.kt)("p",null,"Then, in the popup window, select ",(0,o.kt)("strong",{parentName:"p"},"Injected Web3 Provider"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(30533).Z,width:"256",height:"177"})),(0,o.kt)("p",null,"Next, choose the Fluent Wallet, as we aim to deploy the contract to Core Space."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(53788).Z,width:"263",height:"140"})),(0,o.kt)("p",null,"Finally, click ",(0,o.kt)("strong",{parentName:"p"},"approve")," in the wallet popup window. You will then see the wallet connection status (top right) as ",(0,o.kt)("strong",{parentName:"p"},"Connected"),", along with the connected account address and balance at the bottom right."),(0,o.kt)("p",null,"Remember to switch the network to ",(0,o.kt)("strong",{parentName:"p"},"Conflux Testnet")," in Fluent."),(0,o.kt)("h2",{id:"deploying-the-contract"},"Deploying the Contract"),(0,o.kt)("p",null,"Click on ",(0,o.kt)("strong",{parentName:"p"},"Deploy & Interaction")," in the right toolbox, select a contract, and hit the ",(0,o.kt)("strong",{parentName:"p"},"Deploy")," button. A deployment confirmation popup will appear; click ",(0,o.kt)("strong",{parentName:"p"},"Confirm"),". This action sends a transaction to the Core Space Testnet and deploys the contract upon execution."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(63947).Z,width:"738",height:"677"})),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"Output")," area will display the deployment progress, including the transaction hash."),(0,o.kt)("p",null,"Once deployed, a new contract will appear in the ",(0,o.kt)("strong",{parentName:"p"},"Interact")," area."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(12063).Z,width:"338",height:"922"})),(0,o.kt)("h2",{id:"interacting-with-the-contract"},"Interacting with the Contract"),(0,o.kt)("p",null,"The Interact tool lists all public functions of the contract. For read-only functions, click the ",(0,o.kt)("strong",{parentName:"p"},"Get")," button. If the function requires parameters, enter them in the input box."),(0,o.kt)("p",null,"For state-changing functions, click the ",(0,o.kt)("strong",{parentName:"p"},"Submit")," button to send a transaction to the Core Space Testnet. The result will appear in the ",(0,o.kt)("strong",{parentName:"p"},"Output")," area after the transaction executes."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(48989).Z,width:"655",height:"667"})),(0,o.kt)("h2",{id:"additional-tools"},"Additional Tools"),(0,o.kt)("p",null,"Other tools in the right toolbox include:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Contract Verifier: Verifies contract source code on ConfluxScan."),(0,o.kt)("li",{parentName:"ol"},"Address Converter")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(4305).Z,width:"331",height:"627"})),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(88696).Z,width:"325",height:"412"})),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"ChainIDE is a powerful IDE for smart contract development, offering convenience and suitability for beginners. It is an excellent tool for developing and deploying smart contracts on the Core Space Testnet."))}u.isMDXComponent=!0},75742:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/chainide-2bb04f9388ff7fbddbd4c9e4c0c3a8d4.png"},82094:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/compile-241e6ba8559c545ac7c6efd5c12ac9de.png"},30533:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/connect-wallet-1-f4b9bb2a150a4149414a83c0c0b9be24.png"},53788:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/connect-wallet-2-6d825a567fdb57cda36d2977dcee13b8.png"},63947:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/contract-deploy-3a3320eb5438881b14e9274b0a9c06ed.png"},12063:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/contract-interact-d5c350d76af7db7383bbc6bcd442fb00.jpg"},4305:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/contract-verifier-a73342d2726f17347b8c5323775939dd.jpg"},67578:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/create-project-bc58bb5e6da5fe314fccd5446dd4f222.png"},48989:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/interact-contract-change-state-c3d6ab05fd409874f80da056b48f8e43.png"},98221:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/overview-6c4f49dfcb0ee60643f866ed5d005ff4.jpg"},88696:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/tool-address-converter-1e0e433e97c09020c7a54088f6e96094.png"}}]);