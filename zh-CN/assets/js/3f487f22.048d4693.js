"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[6388],{91696:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=s(85893),o=s(11151);const i={displayed_sidebar:"generalSidebar"},l="\u6d4b\u8bd5\u6846\u67b6",d={id:"general/build/node-development/test-framework",title:"\u6d4b\u8bd5\u6846\u67b6",description:"\u8fd9\u4e2a\u6846\u67b6\u662f\u7528 python3\u7f16\u5199\u7684\u3002 \u5b83\u53ef\u4ee5\u7528\u4e8e\u642d\u5efa\u591a\u4e2aConflux\u8282\u70b9\uff0c\u5e76\u5728\u672c\u5730\u6d4b\u8bd5\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8fd0\u884c\u3002 \u901a\u8fc7\u914d\u7f6e\u8282\u70b9\uff0c\u8c03\u7528RPC\uff0c\u6216\u8005\u5411\u4ed6\u4eec\u76f4\u63a5\u53d1\u9001 P2P \u4fe1\u606f\u6765\u63a7\u5236\u8282\u70b9\u884c\u4e3a\u3002",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/general/build/node-development/test-framework.md",sourceDirName:"general/build/node-development",slug:"/general/build/node-development/test-framework",permalink:"/zh-CN/docs/general/build/node-development/test-framework",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",frontMatter:{displayed_sidebar:"generalSidebar"},sidebar:"generalSidebar",previous:{title:"Block Synchronization Process",permalink:"/zh-CN/docs/general/build/node-development/sync"},next:{title:"Introduction to Transaction Traces",permalink:"/zh-CN/docs/general/build/node-development/trace-introduction"}},r={},c=[{value:"\u793a\u4f8b\u6d4b\u8bd5",id:"\u793a\u4f8b\u6d4b\u8bd5",level:2},{value:"Sending P2P Messages",id:"sending-p2p-messages",level:2},{value:"Configurations",id:"configurations",level:2},{value:"Utility Function List",id:"utility-function-list",level:2},{value:"Introduction to Existing Python Tests",id:"introduction-to-existing-python-tests",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"\u6d4b\u8bd5\u6846\u67b6",children:"\u6d4b\u8bd5\u6846\u67b6"}),"\n",(0,t.jsxs)(n.p,{children:["\u8fd9\u4e2a\u6846\u67b6\u662f\u7528 ",(0,t.jsx)(n.code,{children:"python3"}),"\u7f16\u5199\u7684\u3002 \u5b83\u53ef\u4ee5\u7528\u4e8e\u642d\u5efa\u591a\u4e2aConflux\u8282\u70b9\uff0c\u5e76\u5728\u672c\u5730\u6d4b\u8bd5\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8fd0\u884c\u3002 \u901a\u8fc7\u914d\u7f6e\u8282\u70b9\uff0c\u8c03\u7528RPC\uff0c\u6216\u8005\u5411\u4ed6\u4eec\u76f4\u63a5\u53d1\u9001 P2P \u4fe1\u606f\u6765\u63a7\u5236\u8282\u70b9\u884c\u4e3a\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u6240\u6709\u76f8\u5173\u6587\u4ef6\u90fd\u5305\u542b\u5728 ",(0,t.jsx)(n.code,{children:"tests"})," \u76ee\u5f55\u4e2d\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\uff0c\u4f7f\u7528",(0,t.jsx)(n.code,{children:"cargo build --release"})," \u7f16\u8bd1\u6e90\u4ee3\u7801\u540e\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c ",(0,t.jsx)(n.code,{children:"tests/test_all.py"})," \u6765\u8fd0\u884c\u6240\u6709\u5305\u542b\u7684Python\u6d4b\u8bd5\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u793a\u4f8b\u6d4b\u8bd5",children:"\u793a\u4f8b\u6d4b\u8bd5"}),"\n",(0,t.jsx)(n.p,{children:"\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u6d4b\u8bd5\u3002 \u5b83\u914d\u7f6e\u4e862\u4e2a\u8282\u70b9\uff0c\u4f7f\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u751f\u6210\u4e00\u4e9b\u5757\uff0c\u6700\u540e\u8fde\u63a5\u5b83\u4eec\u6765\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u80fd\u591f\u6536\u5230\u53e6\u4e00\u65b9\u751f\u6210\u7684\u5757\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from test_framework.test_framework import ConfluxTestFramework\nfrom test_framework.util import *\n\nclass ExampleTest(ConfluxTestFramework):\n    def set_test_params(self):\n        self.setup_clean_chain = True\n        self.num_nodes = 2\n\n    def setup_network(self):\n        self.setup_nodes()\n        # connect_sample_nodes(self.nodes, self.log)\n\n    def run_test(self):\n        self.nodes[0].generate(1, 0)\n        assert (self.nodes[0].getblockcount() == 2)\n\n        self.nodes[1].generate(2, 0)\n        assert (self.nodes[1].getblockcount() == 3)\n\n        connect_nodes(self.nodes, 0, 1)\n        sync_blocks(self.nodes)\n        assert (self.nodes[0].getblockcount() == 4)\n        self.log.info(\"PASS\")\n\nif __name__ == '__main__':\n    ExampleTest().main()\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u8fd9\u4e2a\u6846\u67b6\u5c06\uff1a"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\u8c03\u7528",(0,t.jsx)(n.code,{children:"set_test_params"}),"\u8bbe\u7f6e\u6d4b\u8bd5\u521d\u59cb\u5316\u53c2\u6570\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u6839\u636e",(0,t.jsx)(n.code,{children:"set_test_params"}),"\u4e2d\u8bbe\u7f6e\u7684\u53c2\u6570\uff0c\u8bbe\u7f6e\u6d4b\u8bd5\u76ee\u5f55\u548c\u8282\u70b9\u914d\u7f6e\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55\uff0c\u5e76\u5c06\u6240\u6709\u6587\u4ef6\u4fdd\u5b58\u5728\u4e34\u65f6\u76ee\u5f55\u4e2d\u3002 \u4f8b\u5982\uff0c\u8bbe\u7f6e",(0,t.jsx)(n.code,{children:"self.num_nodes = 2"})," \u5c06\u4e3a\u4e24\u4e2a\u8282\u70b9\u521d\u59cb\u5316\u76ee\u5f55\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u8c03\u7528",(0,t.jsx)(n.code,{children:"setup_network"})," \u6dfb\u52a0\u8282\u70b9\u5e76\u8fde\u63a5\u5b83\u4eec\u3002 Here ",(0,t.jsx)(n.code,{children:"self.setup_nodes()"})," will add 2 Conflux nodes by running pre-compiled Conflux executable binary within the directory setupped in step 2. We do not connect them here because we want nodes seperated at the beginning."]}),"\n",(0,t.jsxs)(n.li,{children:["Call ",(0,t.jsx)(n.code,{children:"run_test"})," to run the actual test codes."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["After running ",(0,t.jsx)(n.code,{children:"self.setup_nodes()"}),", ",(0,t.jsx)(n.code,{children:"self.nodes"})," is a list of ",(0,t.jsx)(n.code,{children:"TestNode"}),", and each can be used to interact with the corresponding Conflux node. For example, to get the number of blocks in node 0 by calling the RPC named ",(0,t.jsx)(n.code,{children:"getblockcount"}),", you simply call ",(0,t.jsx)(n.code,{children:"self.nodes[0].getblockcount"})," and an integer will be returned."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"connect_nodes(self.nodes, 0, 1)"})," connects nodes 0 and 1. ",(0,t.jsx)(n.code,{children:"sync_blocks(self.nodes)"})," waits until all nodes have the same pivot chain tip. Them are both implemented by calling RPCs, and more useful functions will be introduced in ",(0,t.jsx)(n.a,{href:"#utility-function-list",children:"Utility Function List"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"sending-p2p-messages",children:"Sending P2P Messages"}),"\n",(0,t.jsxs)(n.p,{children:["After calling ",(0,t.jsx)(n.code,{children:"start_p2p_connection(self.nodes)"}),", the field ",(0,t.jsx)(n.code,{children:"p2p"})," of each ",(0,t.jsx)(n.code,{children:"TestNode"})," will be initialized with a simulated Conflux node written in Python, and this simulated node will be connected to the Conflux process controled by the corresponding ",(0,t.jsx)(n.code,{children:"TestNode"}),". After that, you can send and receive P2P messages within python code. Here is an example about how to use ",(0,t.jsx)(n.code,{children:"p2p"})," to interact with the Conflux node."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"    def run_test(self):\n        def assert_length(_node, msg):\n            assert_equal(len(msg.headers), 1)\n        h = WaitHandler(self.nodes[0].p2p, GET_BLOCK_HEADERS_RESPONSE, assert_length)\n        self.nodes[0].p2p.send_protocol_msg(GetBlockHeaders(hashes=[self.nodes[0].p2p.genesis.hash]))\n        h.wait()\n"})}),"\n",(0,t.jsx)(n.p,{children:"This example tries to get the genesis block header from node 0 with P2P requests (instead of using RPC), and asserts that only one header is returned."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"WaitHandler"})," will wait for the first message of the designated message type and run a function on this received message. ",(0,t.jsx)(n.code,{children:"p2p.send_protocol_msg"})," is used to send a rlp-encodable message. ",(0,t.jsx)(n.code,{children:"h.wait()"})," waits and handles the first received ",(0,t.jsx)(n.code,{children:"GET_BLOCK_HEADERS_RESPONSE"})," message. Note that ",(0,t.jsx)(n.code,{children:"WaitHandler"})," starts listening right after it's initialized."]}),"\n",(0,t.jsx)(n.h2,{id:"configurations",children:"Configurations"}),"\n",(0,t.jsxs)(n.p,{children:["By default, tests will use the release version executable binary built by ",(0,t.jsx)(n.code,{children:"cargo"}),". If you want to use a file at another path (e.g., a debug version binary), you can set the environment variable ",(0,t.jsx)(n.code,{children:"CONFLUX"})," to the full path of the used binary file before running the tests."]}),"\n",(0,t.jsx)(n.p,{children:"\u5f85\u5b9e\u73b0"}),"\n",(0,t.jsx)(n.h2,{id:"utility-function-list",children:"Utility Function List"}),"\n",(0,t.jsx)(n.p,{children:"\u5f85\u5b9e\u73b0"}),"\n",(0,t.jsx)(n.h2,{id:"introduction-to-existing-python-tests",children:"Introduction to Existing Python Tests"}),"\n",(0,t.jsx)(n.p,{children:"\u5f85\u5b9e\u73b0"})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>l});var t=s(67294);const o={},i=t.createContext(o);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);