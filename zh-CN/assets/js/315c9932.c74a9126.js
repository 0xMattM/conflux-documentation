"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[8764],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),l=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),p=r,m=u["".concat(i,".").concat(p)]||u[p]||f[p]||o;return t?a.createElement(m,c(c({ref:n},d),{},{components:t})):a.createElement(m,c({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=t[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},70307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:2,title:"JS SDK Complete Guide",description:"A comprehensive guide to using the js-conflux-sdk.",displayed_sidebar:"coreSidebar"},c=void 0,s={unversionedId:"core/tutorials/js-conflux-sdk",id:"core/tutorials/js-conflux-sdk",title:"JS SDK Complete Guide",description:"A comprehensive guide to using the js-conflux-sdk.",source:"@site/docs/core/tutorials/js-conflux-sdk.md",sourceDirName:"core/tutorials",slug:"/core/tutorials/js-conflux-sdk",permalink:"/zh-CN/docs/core/tutorials/js-conflux-sdk",draft:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"JS SDK Complete Guide",description:"A comprehensive guide to using the js-conflux-sdk.",displayed_sidebar:"coreSidebar"},sidebar:"coreSidebar",previous:{title:"Tutorials",permalink:"/zh-CN/docs/category/tutorials"},next:{title:"Hardhat Conflux Plugin",permalink:"/zh-CN/docs/core/tutorials/hardhat-conflux-plugin"}},i={},l=[{value:"Account Generation",id:"account-generation",level:2},{value:"Querying Blockchain Data",id:"querying-blockchain-data",level:2},{value:"Deploying Smart Contracts",id:"deploying-smart-contracts",level:2},{value:"Calling Smart Contracts",id:"calling-smart-contracts",level:2},{value:"Common Utilities",id:"common-utilities",level:2},{value:"Address",id:"address",level:3},{value:"Format",id:"format",level:3},{value:"Token Unit Conversion",id:"token-unit-conversion",level:2},{value:"Hashing and Signing",id:"hashing-and-signing",level:2}],d={toc:l},u="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/zh-CN/docs/core/core-developer-quickstart"},"Developer Quickstart")," demonstrates how to install and use the js-conflux-sdk for sending transactions. This guide delves into the details of the js-conflux-sdk."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Account Generation"),(0,r.kt)("li",{parentName:"ul"},"Querying Blockchain Data"),(0,r.kt)("li",{parentName:"ul"},"Deploying Smart Contracts"),(0,r.kt)("li",{parentName:"ul"},"Calling Smart Contracts"),(0,r.kt)("li",{parentName:"ul"},"Common Utilities"),(0,r.kt)("li",{parentName:"ul"},"Unit Conversion"),(0,r.kt)("li",{parentName:"ul"},"Hashing and Signing")),(0,r.kt)("p",null,"For further details and examples, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluxnetwork.org/js-conflux-sdk/"},"js-conflux-sdk documentation"),"."),(0,r.kt)("h2",{id:"account-generation"},"Account Generation"),(0,r.kt)("p",null,"Generate a new account using ",(0,r.kt)("strong",{parentName:"p"},"PrivateKeyAccount"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { PrivateKeyAccount } = require('js-conflux-sdk');\n\n// generate a random testnet account\nPrivateKeyAccount.random(undefined, 1)\n/* PrivateKeyAccount {\n    privateKey: '0xd28edbdb7bbe75787b84c5f525f47666a3274bb06561581f00839645f3c26f66',\n    publicKey: '0xc42b53ae2ef95fee489948d33df391c4a9da31b7a3e29cf772c24eb42f74e94ab3bfe00bf29a239c17786a5b921853b7c5344d36694db43aa849e401f91566a5',\n    address: 'cfxtest:aass3rfcwjz1ab9cg5rtbv61531fmwnsuuy8c26f20',\n    networkId: 1\n} */\n// generate a random mainnet account\nPrivateKeyAccount.random(undefined, 1029) // gen a different account from above\n/* PrivateKeyAccount {\n    privateKey: '0x1b67150f56f49556ef7e3899024d83c125d84990d311ec08fa98aa1433bc0f53',\n    publicKey: '0xd442207828ffd4dad918fea0d75d42dbea1fe5e3789c00a82e18ce8229714eae3f70b12f2f1abd795ad3e5c52a5a597289eb5096548438c233431f498b47b9a6',\n    address: 'cfx:aanpezyvznsdg29zu20wpudwnbhx7t4gcp9k23xchw',\n    networkId: 1029\n} */\n// generate a random account with a random source\nPrivateKeyAccount.random('0xabcdefabcdef', 1);\n/* PrivateKeyAccount {\n    privateKey: '0x1d41e006afd28ea339922d8ab4be93154a14d4f1b6d0ad4e7aabf807e7536a5f',\n    publicKey: '0x4c07c75d3fdc5b1d6afef6ec374b0eaac86bcaa771a1d536bc4ce6f111b1c60e414b370e4cf31bf7770ae6818a3518c485398a43857d9053153f6eb4f5644a90',\n    address: 'cfxtest:aajx4wn2kwarr8h71uf880w40dp6x91feac1n6ur3s',\n    networkId: 1\n} */\n")),(0,r.kt)("h2",{id:"querying-blockchain-data"},"Querying Blockchain Data"),(0,r.kt)("p",null,"Numerous functions are available to query blockchain data, such as block, transaction, receipt, epoch, etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Conflux } = require('js-conflux-sdk');\n\nconst cfxClient = new Conflux({\n  url: 'https://test.confluxrpc.com',\n  networkId: 1,\n  //   logger: console, // for debug\n});\n\nasync function main() {\n    const status = await cfxClient.cfx.getStatus();\n    console.log(status);\n}\n\n// Other available methods:\n// cfxClient.cfx.getBalance\n// cfxClient.cfx.getNextNonce\n// cfxClient.cfx.getBlockByHash\n// cfxClient.cfx.getTransactionByHash\n// cfxClient.cfx.getTransactionReceipt\n")),(0,r.kt)("p",null,"Explore the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Conflux-Chain/js-conflux-sdk/blob/v2/docs/api/Conflux.md"},"Conflux cfx namespace API")," for a complete method list. For more on JSON-RPC, see ",(0,r.kt)("a",{parentName:"p",href:"../build/json-rpc/"},"Conflux Core JSON-RPC API"),"."),(0,r.kt)("h2",{id:"deploying-smart-contracts"},"Deploying Smart Contracts"),(0,r.kt)("p",null,"The js-conflux-sdk simplifies smart contract deployment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Prerequisites: an account with sufficient balance and the smart contract's bytecode and ABI from solc or hardhat\nconst abi = []; // Replace with your contract's ABI\nconst bytecode = '0xabcd'; // Replace with your contract's bytecode\n\nconst contract = cfxClient.Contract({\n  abi,\n  bytecode,\n});\n\nasync function main() {\n    // Deploy the contract (modify if the constructor has parameters)\n    const receipt = await contract.constructor().sendTransaction({\n        from: account,\n    }).executed();\n    console.log('New deployed contract address: ', receipt.contractCreated);\n}\n")),(0,r.kt)("h2",{id:"calling-smart-contracts"},"Calling Smart Contracts"),(0,r.kt)("p",null,"To call a smart contract, you need its ABI and address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const address = ''; // Replace with your contract's address\nconst abi = []; // Replace with your contract's ABI\n\nconst contract = cfxClient.Contract({\n  abi,\n  address,\n});\n\nasync function main() {\n    // Call a view function\n    const result = await contract.viewFunctionName(params);\n    console.log(result);\n    // Call a non-view function\n    const receipt = await contract.nonViewFunctionName(params).sendTransaction({\n        from: account,\n    }).executed();\n    console.log(receipt);\n}\n")),(0,r.kt)("p",null,"Consult the sdk's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluxnetwork.org/js-conflux-sdk/docs/interact_with_contract"},"Contract interaction guide")," for more information."),(0,r.kt)("h2",{id:"common-utilities"},"Common Utilities"),(0,r.kt)("h3",{id:"address"},"Address"),(0,r.kt)("p",null,"The address module offers functions for encoding and decoding cfx addresses and address validation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { address } = require('js-conflux-sdk');\n\n// Encode a hex address to a base32 cfx address\nconst cfxAddress = address.encodeCfxAddress('0x166d0ff7691030b0ca33d4e60e842cd300a3010d', 1);\n\n// Decode a base32 cfx address to a hex address\nconst decoded = address.decodeCfxAddress('cfxtest:aang4d91rejdbpgmgtmspdyefxkubj2bbywrwm9j3z');\n\n// Check if an address is valid\naddress.isValidCfxAddress('cfxtest:aang4d91rejdbpgmgtmspdyefxkubj2bbywrwm9j3z'); // Returns true\n\n// Calculate the mapped EVM address\naddress.cfxMappedEVMSpace\n\nAddress('cfxtest:aang4d91rejdbpgmgtmspdyefxkubj2bbywrwm9j3z');\n")),(0,r.kt)("p",null,"Discover more at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Conflux-Chain/js-conflux-sdk/blob/v2/docs/api/util/address.md"},"address utils API"),"."),(0,r.kt)("h3",{id:"format"},"Format"),(0,r.kt)("p",null,"The format module includes functions to convert data between various formats."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { format } = require('js-conflux-sdk');\n\n// Examples:\nformat.uInt(3); // Returns 3\nformat.hex(Buffer.from('hi')); // Returns 0x6869\nformat.bytes('0x03'); // Returns <Buffer 03>\n")),(0,r.kt)("p",null,"Explore the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Conflux-Chain/js-conflux-sdk/blob/v2/docs/api/util/format.md"},"format API")," for more details."),(0,r.kt)("h2",{id:"token-unit-conversion"},"Token Unit Conversion"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Drip")," class for conversions between ",(0,r.kt)("strong",{parentName:"p"},"Drip")," and ",(0,r.kt)("strong",{parentName:"p"},"CFX"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Drip } = require('js-conflux-sdk');\n\n// Initialize a Drip instance\nlet drip = new Drip('1000000000000000000'); // Equivalent to 1 CFX\n\n// Initialize from CFX\ndrip = Drip.fromCFX(1); // Equivalent to 1 CFX\n\n// Convert to CFX\ndrip.toCFX(); // Returns 1\n")),(0,r.kt)("h2",{id:"hashing-and-signing"},"Hashing and Signing"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sign")," module facilitates hashing and signing data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { sign } = require('js-conflux-sdk');\n\n// Generate a random buffer\nlet buf = sign.randomBuffer(0);\n\n// Generate a keccak hash\nlet keccakHash = sign.keccak256(buf);\n\n// Generate a random private key\nlet privateKey = sign.randomPrivateKey(buf);\n\n// Convert private key to public key\nlet pubKey = sign.privateKeyToPublicKey(privateKey);\n\n// Convert public key to address\nlet address = sign.publicKeyToAddress(pubKey);\n\n// Sign a buffer with the private key\nlet signResult = sign.ecdsaSign(buf, privateKey);\n\n// Recover public key from signature and buffer, then convert it to address\nsign.publicKeyToAddress(sign.ecdsaRecover(buf, sign.ecdsaSign(signResult, privateKey)))\n")))}f.isMDXComponent=!0}}]);