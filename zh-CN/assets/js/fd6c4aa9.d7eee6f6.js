"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[7435],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,m=p["".concat(l,".").concat(u)]||p[u]||d[u]||i;return n?o.createElement(m,r(r({ref:t},h),{},{components:n})):o.createElement(m,r({ref:t},h))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1015:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i={},r="The Conflux Consensus Layer Design and Implementation",s={unversionedId:"general/build/consensus-design",id:"general/build/consensus-design",title:"The Conflux Consensus Layer Design and Implementation",description:"The Conflux consensus layer processes all incoming blocks received from the synchronization layer, produces the total order of blocks based on the Conflux GHAST consensus algorithm, and invokes the underlying transaction execution engine to run transactions in the determined order. It provides the information necessary to assist block generator to prepare the block skeleton of new blocks. It also notifies the transaction pool about processed transactions so that the pool can make better transaction selection decisions.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/general/build/consensus-design.md",sourceDirName:"general/build",slug:"/general/build/consensus-design",permalink:"/zh-CN/docs/general/build/consensus-design",draft:!1,editUrl:"https://crowdin.com/project/conflux/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Build",permalink:"/zh-CN/docs/general/build/"},next:{title:"Rigorous Testing Tools for Conflux",permalink:"/zh-CN/docs/general/build/rigorous-testing"}},l={},c=[{value:"Design Goals",id:"design-goals",level:2},{value:"Structures and Components",id:"structures-and-components",level:2},{value:"ConsensusGraph",id:"consensusgraph",level:3},{value:"ConsensusGraphInner",id:"consensusgraphinner",level:3},{value:"ConsensusNewBlockHandler",id:"consensusnewblockhandler",level:3},{value:"ConsensusExecutor",id:"consensusexecutor",level:3},{value:"ConfirmationMeter",id:"confirmationmeter",level:3},{value:"AnticoneCache and PastsetCache",id:"anticonecache-and-pastsetcache",level:3},{value:"Important Algorithmic Mechanisms",id:"important-algorithmic-mechanisms",level:2},{value:"Pivot Chain and Total Order",id:"pivot-chain-and-total-order",level:3},{value:"Timer Chain",id:"timer-chain",level:3},{value:"Weight Maintenance with Link-Cut Tree",id:"weight-maintenance-with-link-cut-tree",level:3},{value:"Adaptive Weight",id:"adaptive-weight",level:3},{value:"Partial Invalid",id:"partial-invalid",level:3},{value:"Anticone, Past View, and Ledger View",id:"anticone-past-view-and-ledger-view",level:3},{value:"Check Correct Parent",id:"check-correct-parent",level:3},{value:"Fallback Brute Force Methods",id:"fallback-brute-force-methods",level:3},{value:"Force Confirmation",id:"force-confirmation",level:3},{value:"Era",id:"era",level:3},{value:"Checkpoint",id:"checkpoint",level:3},{value:"Deferred Execution",id:"deferred-execution",level:3},{value:"Block Reward Calculation",id:"block-reward-calculation",level:3},{value:"Blaming Mechanism",id:"blaming-mechanism",level:3},{value:"Multi-Thread Design",id:"multi-thread-design",level:2},{value:"Consensus Worker",id:"consensus-worker",level:3},{value:"Consensus Execution Worker",id:"consensus-execution-worker",level:3},{value:"Key Assumptions, Invariants, and Rules",id:"key-assumptions-invariants-and-rules",level:2}],h={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-conflux-consensus-layer-design-and-implementation"},"The Conflux Consensus Layer Design and Implementation"),(0,a.kt)("p",null,"The Conflux consensus layer processes all incoming blocks received from the synchronization layer, produces the total order of blocks based on the Conflux GHAST consensus algorithm, and invokes the underlying ",(0,a.kt)("strong",{parentName:"p"},"transaction execution engine")," to run transactions in the determined order. It provides the information necessary to assist ",(0,a.kt)("strong",{parentName:"p"},"block generator")," to prepare the block skeleton of new blocks. It also notifies the ",(0,a.kt)("strong",{parentName:"p"},"transaction pool")," about processed transactions so that the pool can make better transaction selection decisions."),(0,a.kt)("p",null,"This document is to provide a high-level overview for readers who want to understand the rust implementation of the Conflux consensus layer (in directory core/src/consensus). For more implementation details, see inlined comments in the code. For more information about the Conflux consensus algorithm, see Conflux Protocol Specification and Conflux paper (",(0,a.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1805.03870"},"https://arxiv.org/abs/1805.03870"),")."),(0,a.kt)("h2",{id:"design-goals"},"Design Goals"),(0,a.kt)("p",null,"The consensus layer has the following design goals."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Process new blocks in the background following the consensus algorithm consistently.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"We want to minimize the memory usage of each block in the consensus graph. Even with the checkpoint mechanism, the graph will contain 300K-500K blocks in the normal case and more than 1M blocks when facing liveness attacks. This may stress the memory.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"We want to process each block fast. Because full/archive nodes have to process every block from the ",(0,a.kt)("em",{parentName:"p"},"original genesis")," when they catch up with the network from scratch, fast block process is important to keep the catch up period short.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Robust against potential attacks. Malicious attackers may generate bad blocks at arbitrary positions in the TreeGraph."))),(0,a.kt)("h2",{id:"structures-and-components"},"Structures and Components"),(0,a.kt)("h3",{id:"consensusgraph"},"ConsensusGraph"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph")," (core/src/consensus/mod.rs) is the main struct of the consensus layer. The synchronization layer constructs ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph")," with a ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockDataManager")," which stores all block metadata information on disk. ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph::on_new_block()")," is the key function to send new blocks to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph")," struct to process. It also provides a set of public functions to query the status of blocks/transactions. This should be the main interface with which other components interact."),(0,a.kt)("h3",{id:"consensusgraphinner"},"ConsensusGraphInner"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner")," (core/src/consensus/consensus_inner/mod.rs) is the inner structure of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph::on_new_block()")," acquires the write lock of the inner struct at the start of the function. The rest are query functions that only acquire read locks."),(0,a.kt)("p",null,"The internal structure of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner")," is fairly complicated. Generally speaking, it maintains two kinds of information. The first kind of information is the state of the whole TreeGraph, i.e., the current ",(0,a.kt)("em",{parentName:"p"},"pivot chain"),", ",(0,a.kt)("em",{parentName:"p"},"timer chain"),", ",(0,a.kt)("em",{parentName:"p"},"difficulty"),", etc.. The second kind of information is the state of each block (i.e., ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphNode")," struct for each block). Each block corresponds to a ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphNode")," struct for its information. When it first enters ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner"),", it will be inserted into ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner::arena : Slab<ConsensusGraphNode>"),". The index in the slab will become the arena index of the block in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner"),". We use the arena index to represent a block internally instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"H256")," because it is much cheaper. We will refer back to the fields in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphNode")," when we talk about algorithm mechanism and their implementations."),(0,a.kt)("h3",{id:"consensusnewblockhandler"},"ConsensusNewBlockHandler"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusNewBlockHandler")," (core/src/consensus/consensus_inner/consensus_new_block_handler.rs) contains a set of routines for processing a new block. In theory, this code could be part of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner")," because it mostly manipulates the inner struct. However, these routines are all subroutine of the ",(0,a.kt)("inlineCode",{parentName:"p"},"on_new_block()")," and the consensus_inner/mod.rs is already very complicated. We therefore decided to put them into a separate file."),(0,a.kt)("h3",{id:"consensusexecutor"},"ConsensusExecutor"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor")," (core/src/consensus/consensus_inner/consensus_executor.rs) is the interface struct for the standalone transaction execution thread. ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor::enqueue_epoch()")," allows other threads to send an execution task to execute the epoch of a given pivot chain block asynchronously. Once the computation finishes, the resulting state root will be stored into ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockDataManager"),". Other threads can call ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor::wait_for_result()")," to wait for the execution of an epoch if desired. In the current implementation, ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor")," also contains the routines for the calculation for block rewards, including ",(0,a.kt)("inlineCode",{parentName:"p"},"get_reward_execution_info()")," and its subroutines."),(0,a.kt)("h3",{id:"confirmationmeter"},"ConfirmationMeter"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ConfirmationMeter")," (core/src/consensus/consensus_inner/confirmation_meter.rs) conservatively calculates the confirmation risk of each pivot chain block. Its result will be useful for the storage layer to determine when it is ",(0,a.kt)("em",{parentName:"p"},"safe")," to discard old snapshots. It can also be used to serve RPC queries about block confirmation if we decide to provide such RPC."),(0,a.kt)("h3",{id:"anticonecache-and-pastsetcache"},"AnticoneCache and PastsetCache"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AnticoneCache")," (core/src/consensus/anticone_cache.rs) and ",(0,a.kt)("inlineCode",{parentName:"p"},"PastsetCache")," (core/src/consensus/pastset_cache.rs) are two structs that implement customized caches for data structures in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner"),". In the implementation of the inner struct, we need to calculate and store the anticone set and the past set of each block. However, it is not possible to store all of these sets in memory. We therefore implement cache style data structures to store sets for recently inserted/accessed blocks. If an anticone/past set is not found in the cache, we will recalculate the set in the current inner struct implementation."),(0,a.kt)("h2",{id:"important-algorithmic-mechanisms"},"Important Algorithmic Mechanisms"),(0,a.kt)("p",null,"There are several important algorithmic mechanisms in the Conflux Consensus Layer. Here we will talk about them from the implementation aspect. See XXX for the algorithmic reasoning behind them."),(0,a.kt)("h3",{id:"pivot-chain-and-total-order"},"Pivot Chain and Total Order"),(0,a.kt)("p",null,"The basic idea of the Conflux consensus algorithm is to first make everyone agree on a pivot chain. It then expands the total order from the pivot chain to cover all blocks with a topological sort. As long as the pivot chain does not change/reorg, the total order of blocks will stay the same, so does the derived order of transactions."),(0,a.kt)("p",null,"Comparing with Bitcoin/Ethereum, the consensus in Conflux has two key differences:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"almost every block")," will go into the total order, not just the agreed pivot chain.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The transaction validity and the block validity are ",(0,a.kt)("em",{parentName:"p"},"independent"),". For example, a transaction is invalid if it was included before or it cannot carry out due to insufficient balance. Such invalid transactions will become noop during the execution. However, ",(0,a.kt)("em",{parentName:"p"},"unlike Bitcoin and Ethereum blocks containing such transactions will not become invalid"),"."))),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner"),", the arena index of the current pivot chain blocks are stored in order in the ",(0,a.kt)("inlineCode",{parentName:"p"},"pivot_chain[]")," vector. To maintain it, we calculate the lowest common ancestor (LCA) between the newly inserted block and the current best block following the GHAST rule. If the fork corresponding to the newly inserted block for the LCA ended up to be heavier, we will update the ",(0,a.kt)("inlineCode",{parentName:"p"},"pivot_chain[]")," from the forked point."),(0,a.kt)("h3",{id:"timer-chain"},"Timer Chain"),(0,a.kt)("p",null,"Blocks whose PoW quality is ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_difficulty_ratio")," times higher than the target difficulty are ",(0,a.kt)("em",{parentName:"p"},"timer blocks"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"is_timer")," field of the block will be set to True. The consensus algorithm then finds the longest timer block chain (more accurately, with greatest accumulated difficulty) similar to the Bitcoin consensus algorithm of finding the longest chain. The arena index of this longest timer chain will be stored into ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain[]"),"."),(0,a.kt)("p",null,"The rationale of the timer chain is to provide a coarse-grained measurement of time that cannot be influenced by a malicious attacker. Because timer blocks are rare and generated slowly (if ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_difficulty_ratio")," is properly high), a malicious attacker cannot prevent the growth of the timer chain unless it has the majority of the computation power. Therefore how many timer chain blocks appear in the past set of a block is a good indication about the latest possible generation time of the block. We compute this value for each block and store it in ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_height")," field of the block."),(0,a.kt)("h3",{id:"weight-maintenance-with-link-cut-tree"},"Weight Maintenance with Link-Cut Tree"),(0,a.kt)("p",null,"To effectively maintain the pivot chain, we need to query the total weight of a subtree. Conflux uses a Link-Cut Tree data structure to maintain the subtree weights in O(log n). The Link-Cut Tree can also calculate the LCA of any two nodes in the TreeGraph in O(log n). The ",(0,a.kt)("inlineCode",{parentName:"p"},"weight_tree")," field in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner")," is the link-cut tree that stores the subtree weight of every node. Note that the implementation of the Link-Cut Tree is in the utils/link-cut-tree directory."),(0,a.kt)("h3",{id:"adaptive-weight"},"Adaptive Weight"),(0,a.kt)("p",null,"If the TreeGraph is under a liveness attack, it may fail to converge under one block for a while. To handle this situation, the GHAST algorithm idea is to start to generate adaptive blocks, i.e., blocks whose weights are redistributed significantly so that there will be many zero weight blocks with a rare set of very heavy blocks. Specifically, if the PoW quality of an adaptive block is ",(0,a.kt)("inlineCode",{parentName:"p"},"adaptive_heavy_block_ratio")," times of the target difficulty, the block will have a weight of ",(0,a.kt)("inlineCode",{parentName:"p"},"adaptive_heavy_block_ratio"),"; otherwise, the block will have a weight of zero. This effectively slows down the confirmation temporarily but will ensure the consensus progress."),(0,a.kt)("p",null,"Because adaptive weight is a mechanism to defend against rare liveness attacks, it should not be turned on during the normal scenario. A new block is adaptive only if: 1) one of its ancestor blocks is still not the dominant subtree comparing to its siblings, and 2) a significantly long period of time has passed between the generation of that ancestor block and the new block (i.e., the difference of ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_height")," is sufficiently large). ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner::adaptive_weight()")," and its subroutines implement the algorithm to determine whether a block is adaptive or not. Note that the implementation uses another link-cut-tree ",(0,a.kt)("inlineCode",{parentName:"p"},"adaptive_tree")," as a helper. Please see the inlined comments for the implementation details."),(0,a.kt)("h3",{id:"partial-invalid"},"Partial Invalid"),(0,a.kt)("p",null,"Note that the past set of a new block denotes all the blocks that the generator of the new block observes at the generation time. Therefore, from the past set of a new block, other full nodes could determine whether it chooses the correct parent block and whether it should be adaptive or not."),(0,a.kt)("p",null,"The Conflux consensus algorithm defines those blocks who choose incorrect parents or fill in incorrect adaptive status as ",(0,a.kt)("em",{parentName:"p"},"partial invalid blocks"),". For a partial invalid block, the ",(0,a.kt)("inlineCode",{parentName:"p"},"partial_invalid")," field will be set to True. The algorithm requires the partial invalid blocks being treated differently from the normal blocks in three ways:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"All honest nodes will not reference directly or indirectly partial invalid blocks until a significant period of time. This time period is measured with the ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_height")," and the difference has to be more than ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta"),". Yes, it means that if another otherwise perfectly fine block referencing the partial invalid block, both of these two blocks will not be referenced for a while.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Partial invalid blocks will have no block reward. They are extremely unlikely to get any reward anyway because of their large anticone set due to the first rule.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Partial invalid blocks are excluded from the timer chain consideration."))),(0,a.kt)("p",null,"To implement the first rule, the ",(0,a.kt)("inlineCode",{parentName:"p"},"on_new_block()")," routine in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusNewBlockHandler")," is separated into two subroutine ",(0,a.kt)("inlineCode",{parentName:"p"},"preactivate_block()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"activate_block()"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"preactivate_block()")," compute and determine whether a block is partial invalid or not, while ",(0,a.kt)("inlineCode",{parentName:"p"},"activate_block()")," fully integrate a block into the consensus graph inner data structures. For every new block, the field ",(0,a.kt)("inlineCode",{parentName:"p"},"active_cnt")," tracks how many inactive blocks it references. A block is inactive if it references directly or indirectly a partial invalid block. ",(0,a.kt)("inlineCode",{parentName:"p"},"activate_block()")," will be called on a block only when ",(0,a.kt)("inlineCode",{parentName:"p"},"active_cnt")," of the block becomes zero. The field ",(0,a.kt)("inlineCode",{parentName:"p"},"activated")," denotes whether a block is active or not. For partially invalid blocks, their activation will be delayed till the current timer chain height of the ledger is ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," higher than the invalid block. Newly generated blocks will not reference any inactive blocks, i.e., these inactive blocks are treated as if they were not in the TreeGraph."),(0,a.kt)("h3",{id:"anticone-past-view-and-ledger-view"},"Anticone, Past View, and Ledger View"),(0,a.kt)("p",null,"In order to check the partial invalid status of each block, we need to operate under the ",(0,a.kt)("em",{parentName:"p"},"past view")," of the block to determine its correct parent and its adaptivity. This is different from the current state of the TreeGraph or we call it the ",(0,a.kt)("em",{parentName:"p"},"ledger view"),", i.e., all blocks in the anticone and the future set of the block are excluded. Because we process blocks in topological order, the future set of a new block is empty. We therefore need to eliminate all anticone blocks only."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"compute_and_update_anticone()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusNewBlockHandler")," computes the anticone set of a new block. Note that because the anticone set may be very large, we have two implementation level optimizations. First, we represent the anticone set as a set of barrier nodes in the TreeGraph, i.e., a set of subtrees where each block in the subtrees is in the anticone set. Second, we will maintain the anticone set of the recently accessed/inserted blocks only. When checking whether a block is valid in its past view or not (e.g., in ",(0,a.kt)("inlineCode",{parentName:"p"},"adaptive_weight()")," and in ",(0,a.kt)("inlineCode",{parentName:"p"},"check_correct_parent()"),"), we first cut all barrier subtrees from the link-cut weight trees accordingly to get the state of the past view. After the computation, we restore these anticone subtrees."),(0,a.kt)("h3",{id:"check-correct-parent"},"Check Correct Parent"),(0,a.kt)("p",null,"To check whether a new block chooses a correct parent block or not, we first compute the set of blocks inside the epoch of the new block assuming that the new block is on the pivot chain. We store this set to the field ",(0,a.kt)("inlineCode",{parentName:"p"},"blockset_in_own_view_of_epoch"),". We then iterate over every candidate block in this set to make sure that the chosen parent block is better than it. Specifically, we find out the two fork blocks of the candidate block and the parent block from their LCA and make sure that the fork of the parent is heavier. This logic is implemented in ",(0,a.kt)("inlineCode",{parentName:"p"},"check_correct_parent()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusNewBlockHandler"),"."),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"blockset_in_own_view_of_epoch")," may become too large to hold consistently in memory as well. Especially if a malicious attacker tries to generate invalid blocks to blow up this set. The current implementation will only periodically clear the set and only keep the sets for pivot chain blocks. Note that for pivot chain blocks, this set will also be used during the transaction execution."),(0,a.kt)("h3",{id:"fallback-brute-force-methods"},"Fallback Brute Force Methods"),(0,a.kt)("p",null,"There are situations where the anticone barrier set is too large if a malicious attacker tries to launch a performance attack on Conflux. This will make the default strategy worse than O(n) because there is a factor of O(log n) for each block in the barrier set when we do the link-cut tree chopping. To this end, we implemented a brute force routine ",(0,a.kt)("inlineCode",{parentName:"p"},"compute_subtree_weights()")," to compute the subtree weights of each block in a past view for O(n). We also implement ",(0,a.kt)("inlineCode",{parentName:"p"},"check_correct_parent_brutal()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"adaptive_weight_impl_brutal()")," to use the brute-force computed subtree weight to do the checking instead."),(0,a.kt)("h3",{id:"force-confirmation"},"Force Confirmation"),(0,a.kt)("p",null,"The Conflux consensus algorithm will ",(0,a.kt)("em",{parentName:"p"},"force confirm")," a block if 1) there are ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," consecutive timer chain blocks under the subtree of the block and 2) afterward there are at least ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," timer chain blocks following (not required in the subtree though). Force confirmation means that new blocks should follow this block as their ancestor no matter what, ignoring subtree weights. Though extremely unlikely a force confirmed block will have lesser weights than its siblings."),(0,a.kt)("p",null,"The force confirmation mechanism is to enable checkpoint, which we will describe later. It is based on the rationale that:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Reverting a ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," length timer chain is impossible.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Therefore force confirmed block will always move along the pivot chain, not drifting between its siblings."))),(0,a.kt)("p",null,"We compute the accumulative LCA of the last ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," timer chain blocks and store it at the ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_accumulative_lca[]")," field. This vector is ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," shorter than ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain[]")," because the force confirm needs at least ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," timer chain block trailing, so their LCAs do not matter. ",(0,a.kt)("inlineCode",{parentName:"p"},"check_correct_parent()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"adaptive_weight()")," and their subroutines also respect this force confirm point during their checking. Specifically, any fork before the force confirm height is ignored."),(0,a.kt)("p",null,"Note that this force confirm rule is also defined based on ",(0,a.kt)("em",{parentName:"p"},"past view")," of each block. With the computed anticone information, ",(0,a.kt)("inlineCode",{parentName:"p"},"compute_timer_chain_tuple()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner")," computes the timer chain related information of each block under its past view. The results of this function include the difference of the ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain[]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_accumulative_lca[]"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_height")," between the ledger view and the past view. We can use the diff and the current ledger view values to get the past view values."),(0,a.kt)("h3",{id:"era"},"Era"),(0,a.kt)("p",null,"In order to implement the checkpoint mechanism, the Conflux consensus algorithm split the graph into eras. Every era contains ",(0,a.kt)("inlineCode",{parentName:"p"},"era_epoch_count")," epochs. For example, if the ",(0,a.kt)("inlineCode",{parentName:"p"},"era_epoch_count")," is 50000, then there is a new era every 50000 epochs. The pivot chain block at the height 50000 will be the genesis of a new era. At the era boundary, there are several differences from the normal case."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"A block will enter the total order for execution only if 1) it is under the subtree of the previous era genesis and 2) it is inside the past set of the next era genesis in the pivot chain.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Anticone penalty calculation for the block reward does not go across the era boundary."))),(0,a.kt)("h3",{id:"checkpoint"},"Checkpoint"),(0,a.kt)("p",null,"Inside ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraphInner"),", there are two key height pointers, the current checkpoint era genesis block height (",(0,a.kt)("inlineCode",{parentName:"p"},"cur_era_genesis_height"),") and the current stable era genesis block height (",(0,a.kt)("inlineCode",{parentName:"p"},"cur_era_stable_height"),"). These two height pointers will always point to some era genesis (being a multiple of ",(0,a.kt)("inlineCode",{parentName:"p"},"era_epoch_count"),"). Initially, both of these two pointers will point to the true genesis (height 0)."),(0,a.kt)("p",null,"A new era genesis block becomes stable (i.e., ",(0,a.kt)("inlineCode",{parentName:"p"},"cur_era_stable_height")," moves) if the block is ",(0,a.kt)("em",{parentName:"p"},"force confirmed")," in the current TreeGraph. A stable era genesis block becomes a new checkpoint (i.e., ",(0,a.kt)("inlineCode",{parentName:"p"},"cur_era_genesis_height")," moves) if:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The block is ",(0,a.kt)("em",{parentName:"p"},"force confirmed in the past view of the stable era genesis block"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the anticone of this block, there is no timer chain block."))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"should_move_stable_height()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"should_form_checkpoint_at()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusNewBlockHandler")," are invoked after every newly inserted block to test the above two conditions. Generally speaking, the stable era genesis block will never be reverted off the pivot chain. Any block in the past set of the checkpoint block is no longer required for the future computation of the consensus layer. Therefore, after a new checkpoint is formed, ",(0,a.kt)("inlineCode",{parentName:"p"},"make_checkpoint_at()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusNewBlockHandler")," is called to clean up those blocks that are not in the future set of the new checkpoint."),(0,a.kt)("p",null,"Note that the checkpoint mechanism also changes how we handle a new block. For a new block:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If the new block is outside the subtree of the current checkpoint, we only need to insert a stub into our data structure (because a block under the subtree may be indirectly referenced via this stub block). We do not need to care about such a block because it is not going to change the timer chain and it is not going to be executed.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If the past set of the new block does not contain the stable era genesis block, we do not need to check the partial invalid status of this block. This is because this block will not change the timer chain (recall our assumption that the timer chain will not reorg for more than ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta")," blocks) and future blocks can reference this block directly (since the timer chain difference is already more than ",(0,a.kt)("inlineCode",{parentName:"p"},"timer_chain_beta"),")."))),(0,a.kt)("h3",{id:"deferred-execution"},"Deferred Execution"),(0,a.kt)("p",null,"Because the TreeGraph pivot chain may oscillate temporarily, we defer the transaction execution for ",(0,a.kt)("inlineCode",{parentName:"p"},"DEFERRED_STATE_EPOCH_COUNT")," epochs (default 5). After a pivot chain update, ",(0,a.kt)("inlineCode",{parentName:"p"},"activate_block()")," routine will enqueue the execution task of the new pivot chain except for the last five epochs. It calls ",(0,a.kt)("inlineCode",{parentName:"p"},"enqueue_epoch()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor")," to enqueue each task."),(0,a.kt)("h3",{id:"block-reward-calculation"},"Block Reward Calculation"),(0,a.kt)("p",null,"Because there is no explicit coinbase transaction in Conflux, all block rewards are computed implicitly during the transaction execution. In Conflux, the block reward is determined by the base reward and the penalty ratio based on the total weight of its anticone blocks divided by its epoch pivot block's target difficulty. This anticone set only considers blocks appearing no later than the next ",(0,a.kt)("inlineCode",{parentName:"p"},"REWARD_EPOCH_COUNT")," epochs. Specifically, if there is a new era then the anticone set will not count across the era boundary as well. ",(0,a.kt)("inlineCode",{parentName:"p"},"get_pivot_reward_index()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor")," counts this reward anticone threshold. ",(0,a.kt)("inlineCode",{parentName:"p"},"get_reward_execution_info_from_index()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor")," and its subroutines compute this anticone set given the threshold point in the pivot chain."),(0,a.kt)("h3",{id:"blaming-mechanism"},"Blaming Mechanism"),(0,a.kt)("p",null,"It is infeasible to validate the filled state root of a block because we would need to execute all transactions in a different order in the past view of that block. Instead, we will only ask full nodes to validate the state root results on the current pivot chain. It then fills a blame number to indicate how many levels ancestors from the parent who do not have correct state root. When this number is greater than zero, the filled deferred state root becomes a Merkel H256 vector that contains the corrected state roots of the ancestors along with the correct one. ",(0,a.kt)("inlineCode",{parentName:"p"},"get_blame_and_deferred_state_for_generation()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph")," computes the blame information for the block generation. ",(0,a.kt)("inlineCode",{parentName:"p"},"first_trusted_header_starting_from()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusGraph")," is a useful helper function to compute the first trustworthy header based on the subtree blame information."),(0,a.kt)("h2",{id:"multi-thread-design"},"Multi-Thread Design"),(0,a.kt)("p",null,"The consensus layer has one thread dedicated to processing new blocks from the synchronization layer and one thread dedicated to executing transactions. It of course also has a set of interface APIs that RPC threads and synchronization threads may call."),(0,a.kt)("h3",{id:"consensus-worker"},"Consensus Worker"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Consensus Worker")," is a thread created by the synchronization layer. During the normal running phase, every new block will be sent to a channel connecting the synchronization thread and the consensus worker thread. The consensus work thread consumes each block one by one and invokes ",(0,a.kt)("inlineCode",{parentName:"p"},"consensus::on_new_block()")," to process it. Note that the synchronization layer ensures the new block to be ",(0,a.kt)("em",{parentName:"p"},"header-ready")," when it is delivered to ",(0,a.kt)("inlineCode",{parentName:"p"},"Consensus Worker"),", i.e., all of its ancestor/past blocks are already delivered to the consensus layer before itself. This enables the consensus layer to always deal with a well-defined direct acyclic graph without holes."),(0,a.kt)("p",null,"One advantage of having a single thread to be dedicated to the consensus protocol is that it simplifies the protocol implementation a lot. Because the details of the consensus protocol are complicated and the implementation involves many sophisticated data structure manipulations, the single thread design makes sure that we do not need to worry about deadlocks or races. Upon the entrance of ",(0,a.kt)("inlineCode",{parentName:"p"},"consensus::on_new_block()"),", the thread acquires the write lock of the inner of the consensus struct (i.e., ConsensusGraphInner). During the normal phase, this thread should be the only one modifying the inner struct of the consensus layer."),(0,a.kt)("h3",{id:"consensus-execution-worker"},"Consensus Execution Worker"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Consensus Execution Worker")," is a thread created at the start of the consensus layer. It is dedicated to transaction execution. There is a channel connecting ",(0,a.kt)("inlineCode",{parentName:"p"},"Consensus Worker")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"Consensus Execution Worker"),". Once the consensus protocol determines the order of the pivot chain, it will send an ",(0,a.kt)("inlineCode",{parentName:"p"},"ExecutionTask")," for each epoch in the pivot chain to the channel. These tasks will be picked up by the ",(0,a.kt)("inlineCode",{parentName:"p"},"Consensus Execution Worker")," thread one by one. The thread loads the previous state before the executed epoch from the storage layer as the input, runs all transactions in the executed epoch (see ",(0,a.kt)("inlineCode",{parentName:"p"},"ConsensusExecutor::process_epoch_transactions()"),"), and produces the result state as the output."),(0,a.kt)("p",null,"The rationale of separating the transaction execution from the consensus protocol implementation is for performance. With our ",(0,a.kt)("em",{parentName:"p"},"blaming mechanism"),", the execution result state is completely separated from the consensus protocol implementation. The ",(0,a.kt)("em",{parentName:"p"},"deferred execution mechanism")," gives us extra room to pipeline the consensus protocol and the transaction execution. It is therefore not wise to block the ",(0,a.kt)("inlineCode",{parentName:"p"},"Consensus Worker")," thread to wait for the execution results from coming back."),(0,a.kt)("h2",{id:"key-assumptions-invariants-and-rules"},"Key Assumptions, Invariants, and Rules"),(0,a.kt)("p",null,"If you want to write code to interact with the Conflux consensus layer, it is very important to understand the following assumptions and rules."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The consensus layer assumes that the passed ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockDataManager")," is in a consistent state. It means that the ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockDataManager")," contains the correct current checkpoint/stable height. Blocks before the checkpoint and the stable height are properly checked during previous execution and they are persisted into the ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockDataManager")," properly. The consensus layer ",(0,a.kt)("strong",{parentName:"p"},"does not check")," the results it fetches from the block data manager. If it is inconsistent, the consensus layer will execute incorrectly or crash!")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Besides the subroutines of ",(0,a.kt)("inlineCode",{parentName:"p"},"on_new_block()"),", ",(0,a.kt)("strong",{parentName:"p"},"no one should hold the write lock of the inner struct"),"! Right now the only exception for this rule is ",(0,a.kt)("inlineCode",{parentName:"p"},"assemble_new_block_impl()")," because of computing the adaptive field and this is not good we plan to change it. Acquiring the write lock of the inner struct is very likely to cause deadlock given the complexity of the Consensus layer and its dependency with many other components. Always try to avoid this!"))))}d.isMDXComponent=!0}}]);