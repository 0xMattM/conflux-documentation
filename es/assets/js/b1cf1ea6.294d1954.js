"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[9066],{4137:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>m});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),i=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},p=function(e){var a=i(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},f=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=i(n),f=r,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return n?t.createElement(m,c(c({ref:a},p),{},{components:n})):t.createElement(m,c({ref:a},p))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=f;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[d]="string"==typeof e?e:r,c[1]=s;for(var i=2;i<o;i++)c[i]=n[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8104:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var t=n(7462),r=(n(7294),n(4137));const o={sidebar_position:6,title:"CrossSpaceCall"},c=void 0,s={unversionedId:"core/learn/core-space-basics/internal-contracts/crossSpaceCall",id:"core/learn/core-space-basics/internal-contracts/crossSpaceCall",title:"CrossSpaceCall",description:"CrossSpaceCall Interface",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/core/learn/core-space-basics/internal-contracts/crossSpaceCall.md",sourceDirName:"core/learn/core-space-basics/internal-contracts",slug:"/core/learn/core-space-basics/internal-contracts/crossSpaceCall",permalink:"/es/docs/core/learn/core-space-basics/internal-contracts/crossSpaceCall",draft:!1,editUrl:"https://crowdin.com/project/conflux/es",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"CrossSpaceCall"},sidebar:"tutorialSidebar",previous:{title:"PoSRegister",permalink:"/es/docs/core/learn/core-space-basics/internal-contracts/poSRegister"},next:{title:"ParamsControl",permalink:"/es/docs/core/learn/core-space-basics/internal-contracts/params-control"}},l={},i=[{value:"CrossSpaceCall Interface",id:"crossspacecall-interface",level:2},{value:"Cross-Space CFX Transfer",id:"cross-space-cfx-transfer",level:2},{value:"From Core to eSpace",id:"from-core-to-espace",level:3},{value:"From eSpace back to Core",id:"from-espace-back-to-core",level:3},{value:"Refers",id:"refers",level:2}],p={toc:i},d="wrapper";function u(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"crossspacecall-interface"},"CrossSpaceCall Interface"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Conflux-Chain/CIPs/blob/master/CIPs/cip-90.md"},"CIP-90")," introduces a new internal contract: ",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall"),". This contract is located at address ",(0,r.kt)("inlineCode",{parentName:"p"},"cfx:aaejuaaaaaaaaaaaaaaaaaaaaaaaaaaaa2sn102vjv")," (",(0,r.kt)("inlineCode",{parentName:"p"},"0x0888000000000000000000000000000000000006"),") in the Core Space. ",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall")," enables ",(0,r.kt)("strong",{parentName:"p"},"CFX and data")," to be transferred between the two spaces."),(0,r.kt)("p",null,"NOTE: The ",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall")," contract is deployed in the Core Space. It can only be call from the Core Space."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface CrossSpaceCall {\n    event Call(bytes20 indexed sender, bytes20 indexed receiver, uint256 value, uint256 nonce, bytes data);\n\n    event Create(bytes20 indexed sender, bytes20 indexed contract_address, uint256 value, uint256 nonce, bytes init);\n\n    event Withdraw(bytes20 indexed sender, address indexed receiver, uint256 value, uint256 nonce);\n\n    event Outcome(bool success);\n\n    /**\n     * @dev Deploy a contract in eSpace\n     * @param init bytes -  The contract init bytecode\n     * @return bytes20 - The hex address of the deployed contract\n     */\n    function createEVM(bytes calldata init) external payable returns (bytes20);\n\n    /**\n     * @dev Transfer CFX from Core space to eSpace specify address. Transfer amount is specified by transaction value.\n     * @param to bytes20 - The hex address of the receiver address in eSpace\n     * @return output bytes\n     */\n    function transferEVM(bytes20 to) external payable returns (bytes memory output);\n\n    /**\n     * @dev Call eSpace contract method from Core space\n     * @param to bytes20 - The hex address of the contract in eSpace\n     * @param data bytes - The contract method call data\n     * @return output bytes - Method call result\n     */ \n    function callEVM(bytes20 to, bytes calldata data) external payable returns (bytes memory output);\n\n    /**\n     * @dev Static call eSpace contract method from Core space\n     * @param to bytes20 - The hex address of the contract in eSpace\n     * @param data bytes - The contract method call data\n     * @return output bytes - Method call result\n     */ \n    function staticCallEVM(bytes20 to, bytes calldata data) external view returns (bytes memory output);\n\n    /**\n     * @dev Widthdraw CFX from eSpace mapped account's balance\n     * @param value uint256 - The amount of CFX to be withdrawn\n     */ \n    function withdrawFromMapped(uint256 value) external;\n\n    /**\n     * @dev Query eSpace mapped account's CFX balance\n     * @param addr address - The core address to query\n     * @return uint256 - Balance\n     */\n    function mappedBalance(address addr) external view returns (uint256);\n\n    /**\n     * @dev Query eSpace mapped account's nonce\n     * @param addr address - The core address to query\n     * @return uint256 - Balance\n     * */ \n    function mappedNonce(address addr) external view returns (uint256);\n}\n")),(0,r.kt)("h2",{id:"cross-space-cfx-transfer"},"Cross-Space CFX Transfer"),(0,r.kt)("h3",{id:"from-core-to-espace"},"From Core to eSpace"),(0,r.kt)("p",null,"Transferring CFX from Conflux Core to eSpace can be done by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall.transferEVM(bytes20 to)")," method. When calling this method, you also need to specify the destination address (",(0,r.kt)("inlineCode",{parentName:"p"},"to"),"). The amount of CFX to be transferred is specified as the value of this transaction."),(0,r.kt)("p",null,"Take js-conflux-sdk (v2) as an example\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { Conflux, format, Drip, CONST } = require('js-conflux-sdk');\n\n// Init Conflux instance\nconst conflux = new Conflux({\n  url: \"https://test.confluxrpc.com\",\n  networkId: 1\n});\n\n// Add account private key\nconst account = conflux.wallet.addPrivateKey(process.env.PRIVATE_KEY);  // Replace PRIVTE_KEY with your own private key\n\nconst CrossSpaceCall = conflux.InternalContract('CrossSpaceCall');\n\nasync function main() {\n  // The eSpace receiver address\n  const receiverAddress = \"0x02e1A5817ABf2812f04c744927FC91F03099C0f4\";\n\n  const receipt = await CrossSpaceCall\n    .transferEVM(receiverAddress)\n    .sendTransaction({\n      from: account.address,\n      value: Drip.fromCFX(1),\n    })\n    .executed();\n\n  console.log('Cross-space transfer: ', receipt.outcomeStatus === CONST.TX_STATUS.SUCCESS ? 'Success' : 'Fail');\n}\n\nmain().catch(console.log);\n")),(0,r.kt)("p",null,"As long as the ",(0,r.kt)("inlineCode",{parentName:"p"},"CrossSpaceCall.transferEVM(bytes20 to)")," method is called successfully, you can see the change by looking up the balance of the desination address in eSpace."),(0,r.kt)("h3",{id:"from-espace-back-to-core"},"From eSpace back to Core"),(0,r.kt)("p",null,"Transferring CFX from eSpace back to Conflux Core requires two steps."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Transfer CFX to the mapped account of the receiver ",(0,r.kt)("a",{parentName:"li",href:"../../../../espace/learn/accounts.md#mapped-addresses-in-cross-space-operations"},"Core Space address")," in eSpace."),(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("inlineCode",{parentName:"li"},"CrossSpaceCall.withdrawFromMapped(amount)")," in Core with the receiver address to withdraw the CFX.")),(0,r.kt)("p",null,"Example of using js-conflux-sdk (v2) to cross back CFX:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Check above init code\nasync function main() {\n  const mappedBalance = await CrossSpaceCall.mappedBalance(account.address);\n  console.log('Mapped account balance: ', Drip.toCFX(`${mappedBalance}`));\n\n  const receipt = await CrossSpaceCall\n    .withdrawFromMapped(Drip.fromCFX(1))\n    .sendTransaction({\n      from: account.address,\n    })\n    .executed();\n\n  console.log('Cross-space transfer: ', receipt.outcomeStatus === CONST.TX_STATUS.SUCCESS ? 'Success' : 'Fail');\n}\n\nmain().catch(console.log);\n")),(0,r.kt)("p",null,"The above example is intended to demonstrate the technical details of transferring CFX between Conflux Core and Conflux eSpace. Users can use the ",(0,r.kt)("a",{parentName:"p",href:"https://confluxhub.io/espace-bridge/cross-space"},"Space Bridge Dapp")," to cross CFX directly through their wallets."),(0,r.kt)("h2",{id:"refers"},"Refers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://confluxhub.io/espace-bridge/cross-space"},"Mainnet Space Bridge")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://test.confluxhub.io/espace-bridge/cross-space"},"Testnet Space Bridge"))))}u.isMDXComponent=!0}}]);