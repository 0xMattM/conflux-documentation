"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[1349],{83429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var c=n(85893),s=n(11151);const i={title:"Selector Collision Attack",displayed_sidebar:"generalSidebar"},o=void 0,r={id:"general/build/smart-contracts/contract-security/selector-collisiion",title:"Selector Collision Attack",description:"The selector collision attack was one of the key reasons behind the hacking of the Poly Network cross-chain bridge.",source:"@site/docs/general/build/smart-contracts/contract-security/selector-collisiion.md",sourceDirName:"general/build/smart-contracts/contract-security",slug:"/general/build/smart-contracts/contract-security/selector-collisiion",permalink:"/es/docs/general/build/smart-contracts/contract-security/selector-collisiion",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/conflux/es",tags:[],version:"current",frontMatter:{title:"Selector Collision Attack",displayed_sidebar:"generalSidebar"},sidebar:"generalSidebar",previous:{title:"Smart Contract Security",permalink:"/es/docs/general/build/smart-contracts/contract-security/"},next:{title:"Gas Optimization",permalink:"/es/docs/general/build/smart-contracts/gas-optimization/"}},a={},l=[];function d(e){const t={a:"a",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.strong,{children:"selector collision attack"})," was one of the key reasons behind the hacking of the Poly Network cross-chain bridge."]}),"\n",(0,c.jsxs)(t.p,{children:["In August 2021, the cross-chain bridge contracts of Poly Network on ETH, BSC, and Polygon were hacked, resulting in losses of up to $611 million. This was the largest blockchain hack of 2021 and ranked second in the history of stolen amounts, we can learn more about the detailed attack incidents from ",(0,c.jsx)(t.a,{href:"https://rekt.news/polynetwork-rekt/",children:"this article"}),"."]}),"\n",(0,c.jsxs)(t.p,{children:["In Ethereum smart contracts, a function selector is the first ",(0,c.jsx)(t.code,{children:"4"})," bytes (",(0,c.jsx)(t.code,{children:"8"})," hexadecimal digits) of the hash of the function signature ",(0,c.jsx)(t.code,{children:'"<function name>(<function inputTypes>)"'}),". When a user calls a contract's function, the first ",(0,c.jsx)(t.code,{children:"4"})," bytes of the ",(0,c.jsx)(t.code,{children:"calldata"})," are the target function's selector, which determines which function to call."]}),"\n",(0,c.jsxs)(t.p,{children:["Due to the function selector being only ",(0,c.jsx)(t.code,{children:"4"})," bytes long, it's quite short and prone to collisions: it's relatively easy to find two different functions that share the same function selector. For example, ",(0,c.jsx)(t.code,{children:"mint(address,uint256)"})," and ",(0,c.jsx)(t.code,{children:"cat642998653(address,uint256)"})," have the same selector: ",(0,c.jsx)(t.code,{children:"0x23b872dd"}),"."]}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.strong,{children:"Vulnerable Contract Example"})}),"\n",(0,c.jsxs)(t.p,{children:["Let's examine a vulnerable contract example. The ",(0,c.jsx)(t.code,{children:"SelectorCollisionTest"})," contract has a state variable ",(0,c.jsx)(t.code,{children:"isCompleted"})," initialized as ",(0,c.jsx)(t.code,{children:"false"}),". The attacker needs to change it to ",(0,c.jsx)(t.code,{children:"true"}),". The contract mainly has ",(0,c.jsx)(t.code,{children:"2"})," functions."]}),"\n",(0,c.jsxs)(t.ol,{children:["\n",(0,c.jsxs)(t.li,{children:["\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"activateKey()"}),": The attacker can call this function to change ",(0,c.jsx)(t.code,{children:"isCompleted"})," to ",(0,c.jsx)(t.code,{children:"true"}),", completing the attack. However, this function checks ",(0,c.jsx)(t.code,{children:"msg.sender == address(this)"}),", meaning the caller must be the contract itself."]}),"\n"]}),"\n",(0,c.jsxs)(t.li,{children:["\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"triggerAction()"}),": It can call functions within the contract, but the function parameter types and the target function are not quite the same: the target function's parameters are ",(0,c.jsx)(t.code,{children:"(bytes)"}),", while the function being called has parameters ",(0,c.jsx)(t.code,{children:"(bytes,bytes,uint64)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-solidity",children:'contract SelectorCollisionTest {\n    bool public isCompleted; // Whether the attack was successful\n\n    // The attacker needs to call this function, but the caller msg.sender must be this contract.\n    function activateKey(bytes memory data) public {\n        require(msg.sender == address(this), "Unauthorized");\n        isCompleted = true;\n    }\n\n    // Vulnerable, the attacker can change the _action variable to collide with the function selector and call the target function to complete the attack.\n    function triggerAction(bytes memory _action, bytes memory data, bytes memory extraData, uint64 timestamp) public returns(bool executed){\n        (executed, ) = address(this).call(\n            abi.encodePacked(\n                bytes4(\n                    keccak256(abi.encodePacked(_action, "(bytes,bytes,uint64)")\n                    )\n                ),\n                abi.encode(data, extraData, timestamp)));\n    }\n}\n'})}),"\n",(0,c.jsx)(t.p,{children:(0,c.jsx)(t.strong,{children:"Attack Method"})}),"\n",(0,c.jsxs)(t.p,{children:["By utilizing the ",(0,c.jsx)(t.code,{children:"triggerAction()"})," function, it's possible to invoke the contract's ",(0,c.jsx)(t.code,{children:"activateKey()"})," function, aiming for the specific selector ",(0,c.jsx)(t.code,{children:"0x4bb3d55c"}),"."]}),"\n",(0,c.jsxs)(t.p,{children:["Within the ",(0,c.jsx)(t.code,{children:"triggerAction()"})," mechanism, the selector emerges from combining the ",(0,c.jsx)(t.code,{children:"_action"})," parameter with the function signature ",(0,c.jsx)(t.code,{children:'"(bytes,bytes,uint64)"'}),". Thus, selecting a fitting ",(0,c.jsx)(t.code,{children:"_action"})," enables the calculated selector to match ",(0,c.jsx)(t.code,{children:"0x4bb3d55c"}),", thereby achieving the objective of the attack."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var c=n(67294);const s={},i=c.createContext(s);function o(e){const t=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),c.createElement(i.Provider,{value:t},e.children)}}}]);