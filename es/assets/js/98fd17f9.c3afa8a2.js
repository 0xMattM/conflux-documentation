"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[6139],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>b});var a=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function t(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,a,o=function(e,n){if(null==e)return{};var r,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=a.createContext({}),c=function(e){var n=a.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):t(t({},n),e)),r},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,b=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return r?a.createElement(b,t(t({ref:n},u),{},{components:r})):a.createElement(b,t({ref:n},u))}));function b(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=r.length,t=new Array(s);t[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[d]="string"==typeof e?e:o,t[1]=l;for(var c=2;c<s;c++)t[c]=r[c];return a.createElement.apply(null,t)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},11848:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=r(87462),o=(r(67294),r(3905));const s={sidebar_position:3,title:"GHAST",displayed_sidebar:"generalSidebar"},t=void 0,l={unversionedId:"general/conflux-basics/consensus-mechanisms/proof-of-work/ghast",id:"general/conflux-basics/consensus-mechanisms/proof-of-work/ghast",title:"GHAST",description:"GHAST (Greedy-Heaviest-Adaptive-SubTree)",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/general/conflux-basics/consensus-mechanisms/proof-of-work/ghast.md",sourceDirName:"general/conflux-basics/consensus-mechanisms/proof-of-work",slug:"/general/conflux-basics/consensus-mechanisms/proof-of-work/ghast",permalink:"/es/docs/general/conflux-basics/consensus-mechanisms/proof-of-work/ghast",draft:!1,editUrl:"https://crowdin.com/project/conflux/es",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"GHAST",displayed_sidebar:"generalSidebar"},sidebar:"generalSidebar",previous:{title:"La estructura Tree-Graph",permalink:"/es/docs/general/conflux-basics/consensus-mechanisms/proof-of-work/tree-graph"},next:{title:"Introducci\xf3n a PoS",permalink:"/es/docs/general/conflux-basics/consensus-mechanisms/proof-of-stake/pos_overview"}},i={},c=[],u={toc:c},d="wrapper";function p(e){let{components:n,...r}=e;return(0,o.kt)(d,(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GHAST (Greedy-Heaviest-Adaptive-SubTree)"),(0,o.kt)("p",null,'Conflux Research Group ha desarrollado el mecanismo GHAST para abordar la cuesti\xf3n del "liveness attack". El mecanismo consiste en aplicar la regla de cadena m\xe1s pesada pero con un sistema de pesos de bloque modificado. El tipo de bloque se decide en base a la estructura tree-graph hist\xf3rica del bloque, no a la discreci\xf3n del minero. Con el mecanismo GHAST, la regla de la cadena m\xe1s pesada se aplica seleccionando el bloque hijo con el peso m\xe1s alto del \xe1rbol hijo del \xfaltimo bloque de la cadena principal. El c\xe1lculo del peso del bloque para el sub\xe1rbol ya no se basa \xfanicamente en el recuento de bloques sino tambi\xe9n en la suma de los pesos. El mecanismo GHAST, permitiendo a los mineros generar bloques especiales, aumenta la dificultad del bloque y ralentiza la velocidad de producci\xf3n del bloque, lo que ayuda a resolver el problema del "liveness attack".'),(0,o.kt)("p",null,"Las partes centrales del mecanismo GHAST pueden resumirse de la siguiente manera:"),(0,o.kt)("p",null,"Se aplica la regla de cadena m\xe1s pesada, pero el bloque tiene tres pesos diferentes: 0, 1, X. Cuando X es un n\xfamero relativamente grande, por ejemplo X = 1000 (ignorando la situaci\xf3n que implica el ajuste de dificultad minera)."),(0,o.kt)("p",null,"Hay dos tipos de bloques en la red: bloques normales y bloques especiales. El peso del bloque normal es siempre 1; el peso del bloque especial se determina de acuerdo a la dificultad del bloque \u2014 hay pesas de bloque especial 1/X de X, mientras que el resto son 0. Minar un bloque normal tiene la misma dificultad que un bloque especial."),(0,o.kt)("p",null,"El tipo de bloque est\xe1 determinado por la estructura hist\xf3rica del tree-graph Puesto que el generador de un bloque no puede especificar arbitrariamente el tipo de bloque."),(0,o.kt)("p",null,"En ausencia de un ataque, todos los bloques honestos reci\xe9n generados deber\xedan convertirse en bloques normales; despu\xe9s de que el atacante lleve a cabo cualquier tipo de \u201cliveness attack\u201d y contin\xfae durante un tiempo suficiente, todos los bloques honestos reci\xe9n generados se convierten en bloques especiales."))}p.isMDXComponent=!0}}]);