"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[4349],{39594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(85893),c=t(11151);const a={sidebar_position:3,title:"Staking",displayed_sidebar:"coreSidebar"},s=void 0,i={id:"core/core-space-basics/internal-contracts/staking",title:"Staking",description:"Overview",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/core/core-space-basics/internal-contracts/staking.md",sourceDirName:"core/core-space-basics/internal-contracts",slug:"/core/core-space-basics/internal-contracts/staking",permalink:"/es/docs/core/core-space-basics/internal-contracts/staking",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/conflux/es",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Staking",displayed_sidebar:"coreSidebar"},sidebar:"coreSidebar",previous:{title:"SponsorWhitelistControl",permalink:"/es/docs/core/core-space-basics/internal-contracts/sponsor-whitelist-control"},next:{title:"ConfluxContext",permalink:"/es/docs/core/core-space-basics/internal-contracts/conflux-context"}},r={},l=[{value:"Overview",id:"overview",level:2},{value:"Deposit and Withdraw",id:"deposit-and-withdraw",level:2},{value:"Locking and Vote Power",id:"locking-and-vote-power",level:2},{value:"Interface",id:"interface",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,c.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"Conflux introduces the staking mechanism for two reasons: first, staking mechanism provides a better way to charge the occupation of storage space (comparing to \u201cpay once, occupy forever\u201d); and second, this mechanism also helps in defining the voting power in decentralized governance."}),"\n",(0,o.jsxs)(n.p,{children:["At a high level, Conflux implements a built-in ",(0,o.jsx)(n.strong,{children:"Staking"})," contract to record the staking information of all accounts, for both normal addresses and smart contracts. By sending a transaction to this contract, users (both external users and smart contracts) can deposit/withdraw funds, which is also called stakes in the contract."]}),"\n",(0,o.jsx)(n.h2,{id:"deposit-and-withdraw",children:"Deposit and Withdraw"}),"\n",(0,o.jsxs)(n.p,{children:["A user (or a contract) can deposit balance for staking by calling ",(0,o.jsx)(n.code,{children:"deposit(uint amount)"})," and then ",(0,o.jsx)(n.code,{children:"amount"})," Drip will be moved from its ",(0,o.jsx)(n.code,{children:"balance"})," to ",(0,o.jsx)(n.code,{children:"stakingBalance"}),". Notice that this function is non-payable, the user only needs to specify the amount to be staked without transferring any funds to internal contract and the ",(0,o.jsx)(n.strong,{children:"minimum deposit amount is 1 CFX"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The user can also withdraw balance by ",(0,o.jsx)(n.code,{children:"withdraw(uint amount)"}),". The caller can call this function to withdraw some tokens from the Conflux Internal Staking Contract. The staking capital will be transferred to the user's balance in time."]}),"\n",(0,o.jsx)(n.h2,{id:"locking-and-vote-power",children:"Locking and Vote Power"}),"\n",(0,o.jsxs)(n.p,{children:["By locking the staking balance, the user can obtain ",(0,o.jsx)(n.em,{children:"vote power"})," for further on-chain governance. With function ",(0,o.jsx)(n.code,{children:"voteLock(uint amount, uint unlock_block_number)"}),', the account makes a promise that "My ',(0,o.jsx)(n.code,{children:"stakingBalance"})," will always have at least ",(0,o.jsx)(n.code,{children:"amount"})," Drip before the block with block number ",(0,o.jsx)(n.code,{children:"unlock_block_number"}),'". The account can make multiple promises, like "I will always at least 10 CFX in this year, and then always stake at least 5 CFX in the next year."  ',(0,o.jsx)(n.strong,{children:"Once the promise has been made, there is no way to cancel it!"})," But the account can overwrite old promise by locking more balance. Whenever the account tries to withdraw ",(0,o.jsx)(n.code,{children:"stakingBalance"}),", the internal contract will check whether the rest balance matches the locking promise."]}),"\n",(0,o.jsxs)(n.p,{children:["Here we introduce the detailed logic for locking balance by illustrating several examples. Suppose the current block number is ",(0,o.jsx)(n.code,{children:"base"}),", Conflux will generate about ",(0,o.jsx)(n.code,{children:"x"})," blocks in the rest of this year and ",(0,o.jsx)(n.code,{children:"y"})," blocks in the next year. Since Conflux generates two block per second, ",(0,o.jsx)(n.code,{children:"y"})," approximately equals to ",(0,o.jsx)(n.code,{children:"2 * 60 * 60 * 24 * 365"}),". And the value of ",(0,o.jsx)(n.code,{children:"x"})," depends on when you read this article."]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["If an account has 10 CFX in ",(0,o.jsx)(n.code,{children:"stakingBalance"}),", and it calls ",(0,o.jsx)(n.code,{children:"voteLock(100 * 10^18, base + x)"}),", then the transaction will  fail because this account tries to lock 100 CFX with insufficient ",(0,o.jsx)(n.code,{children:"stakingBalance"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["However, if this account calls ",(0,o.jsx)(n.code,{children:"voteLock(8 * 10^18, base + x)"}),", the transaction will success."]}),"\n",(0,o.jsxs)(n.li,{children:["After that, if this account calls ",(0,o.jsx)(n.code,{children:"voteLock(6 * 10^18, base + x + y)"}),", the transaction will also success. It means that 8 - 6 = 2 CFX will be unlocked until the end of this year, and another 6 CFX will be locked until the end of next year."]}),"\n",(0,o.jsxs)(n.li,{children:["Then, if this account calls ",(0,o.jsx)(n.code,{children:"voteLock(0, base + x)"}),", nothing will happen. The transaction will not trigger an error during execution. The internal contract will regard this call as a meaningless promise: the account will stake at least 0 CFX. The old promises made in step 2 and step 3 will still hold."]}),"\n",(0,o.jsxs)(n.li,{children:["If this account calls ",(0,o.jsx)(n.code,{children:"voteLock(9 * 10^18, base + x + y)"}),', the old two promises will be overwritten because "locking 9 CFX until the end of the next year" is a stronger promise.']}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["At any time, each locked Drip will be assigned a ",(0,o.jsx)(n.em,{children:"vote power"})," from 0 to 1 according to its unlock time. The Drips to be unlocked in more than one year will have a full vote power. See section 8.3.2 in the ",(0,o.jsx)(n.a,{href:"https://conflux-protocol.s3-ap-southeast-1.amazonaws.com/tech-specification.pdf",children:"Conflux Protocol Specification"})," for more details."]}),"\n",(0,o.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,o.jsxs)(n.p,{children:["The address of the internal contract: ",(0,o.jsx)(n.code,{children:"0x0888000000000000000000000000000000000002"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"pragma solidity >=0.4.15;\n\ncontract Staking {\n    /*** Query Functions ***/\n    /**\n     * @dev get user's staking balance\n     * @param user The address of specific user\n     */\n    function getStakingBalance(address user) public view returns (uint256) {}\n\n    /**\n     * @dev get user's locked staking balance at given blockNumber\n     * @param user The address of specific user\n     * @param blockNumber The blockNumber as index.\n     */\n    // ------------------------------------------------------------------------\n    // Note: if the blockNumber is less than the current block number, function\n    // will return current locked staking balance.\n    // ------------------------------------------------------------------------\n    function getLockedStakingBalance(address user, uint256 blockNumber) public view returns (uint256) {}\n\n\n    /**\n     * @dev get user's vote power staking balance at given blockNumber\n     * @param user The address of specific user\n     * @param blockNumber The blockNumber as index.\n     */\n    // ------------------------------------------------------------------------\n    // Note: if the blockNumber is less than the current block number, function\n    // will return current vote power.\n    // ------------------------------------------------------------------------\n    function getVotePower(address user, uint256 blockNumber) public view returns (uint256) {}\n\n    function deposit(uint256 amount) external {}\n\n    function withdraw(uint256 amount) external {}\n\n    function voteLock(uint256 amount, uint256 unlockBlockNumber) external {}\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const PRIVATE_KEY = '0xxxxxxx';\nconst cfx = new Conflux({\n  url: 'https://test.confluxrpc.com',\n  logger: console,\n  networkId: 1,\n});\nconst account = cfx.wallet.addPrivateKey(PRIVATE_KEY); // create account instance\n\nconst staking_contract = cfx.InternalContract('Staking');\n// deposit some amount of tokens\nstaking_contract.deposit(your_number_of_tokens).sendTransaction({\n  from: account,\n}).confirmed();\n\n// withdraw some amount of tokens\nstaking_contract.withdraw(your_number_of_tokens).sendTransaction({\n  from: account,\n}).confirmed();\n\n// lock some tokens until some block number\nstaking_contract.voteLock(your_number_of_tokens, your_unlock_block_number).sendTransaction({\n  from: account,\n}).confirmed();\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>s});var o=t(67294);const c={},a=o.createContext(c);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);