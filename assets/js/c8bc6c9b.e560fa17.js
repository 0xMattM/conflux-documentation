"use strict";(self.webpackChunkconflux_docs=self.webpackChunkconflux_docs||[]).push([[6112],{20044:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=a(85893),o=a(11151);const i={displayed_sidebar:"generalSidebar",sidebar_position:2},r="Memory vs Calldata",s={id:"general/build/smart-contracts/gas-optimization/memoryAndCalldata",title:"Memory vs Calldata",description:"1. memory: Typically used for function parameters and temporary variables within functions. Stored in memory and not persistent on the blockchain.",source:"@site/docs/general/build/smart-contracts/gas-optimization/memoryAndCalldata.md",sourceDirName:"general/build/smart-contracts/gas-optimization",slug:"/general/build/smart-contracts/gas-optimization/memoryAndCalldata",permalink:"/docs/general/build/smart-contracts/gas-optimization/memoryAndCalldata",draft:!1,unlisted:!1,editUrl:"https://github.com/Conflux-Chain/conflux-documentation/edit/main/docs/general/build/smart-contracts/gas-optimization/memoryAndCalldata.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{displayed_sidebar:"generalSidebar",sidebar_position:2},sidebar:"generalSidebar",previous:{title:"Gas Optimization",permalink:"/docs/general/build/smart-contracts/gas-optimization/"},next:{title:"Comparison Operators",permalink:"/docs/general/build/smart-contracts/gas-optimization/LessThan"}},l={},c=[];function d(n){const e={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"memory-vs-calldata",children:"Memory vs Calldata"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"memory"}),": Typically used for function parameters and temporary variables within functions. Stored in memory and not persistent on the blockchain."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"calldata"}),": Similar to memory, stored in memory and not persistent on the blockchain. The key difference is that calldata variables are immutable and commonly used for function parameters."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["Learn more:\n",(0,t.jsx)(e.a,{href:"https://docs.soliditylang.org/en/latest/types.html#data-location",children:"Data location and assignment behavior"})]}),"\n",(0,t.jsxs)(e.p,{children:["Below, we demonstrate how to write data using both ",(0,t.jsx)(e.code,{children:"calldata"})," and ",(0,t.jsx)(e.code,{children:"memory"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-solidity",children:"contract CalldataAndMemory {\n    struct Confi {\n        uint16 age;\n        string name;\n        string wish;\n    }\n\n    Confi John;\n    Confi Jane;\n\n    function writeToJohn(Confi calldata JohnData) external {\n        John = JohnData;\n    }\n\n    function writeToJane(Confi memory JaneData) external {\n        Jane = JaneData;\n    }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Recommendations for gas optimization:"}),"\n",(0,t.jsxs)(e.p,{children:["\ud83c\udf1f In practical situations, if it's possible to use calldata, it is recommended to use ",(0,t.jsx)(e.code,{children:"calldata"})," instead of ",(0,t.jsx)(e.code,{children:"memory"}),"."]})]})}function m(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},11151:(n,e,a)=>{a.d(e,{Z:()=>s,a:()=>r});var t=a(67294);const o={},i=t.createContext(o);function r(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);